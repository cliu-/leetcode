91. Decode Ways
Medium

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

```python
class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
```

1st answer, this is a variant of fibonacci. The difficulty is to deal with `"0"`.
```python
def numDecodings(s):
    ss=set([str(i) for i in range(1,27)])
    dp=[0]*(len(s)+1)
    dp[0]=1
    for i in range(len(s)):
        if i==0: 
            dp[1]=1 if s[:1] in ss else 0
            continue
        if s[i]=='0':
            if s[i-1:i+1] in ss: dp[i+1]=dp[i]-1
            else: dp[i+1]=0
        else:
            if s[i-1]=='0': dp[i+1]=dp[i]
            elif s[i-1:i+1] in ss: dp[i+1]=dp[i-1]+dp[i]
            else: dp[i+1]=dp[i]
    return dp[-1] 

'0'
'1122012'
'12101212'
'01212'
'120'