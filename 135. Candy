135. Candy
Hard

There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

Example 1:

Input: [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
             The third child gets 1 candy because it satisfies the above two conditions.


```
class Solution(object):
    def candy(self, ratings):
        """
        :type ratings: List[int]
        :rtype: int
        """
```

Runtime: 144 ms, faster than 67.66% of Python online submissions for Candy. Memory Usage: 14.2 MB, less than 9.09% of Python online submissions for Candy.
```python
def candy(ratings):
    raising,p,l=False,0,len(ratings)
    ratings=ratings+[2**32]
    candies=[-2**32]*l
    for i in range(l):
        if ratings[i]>ratings[i+1]:
            if raising: # i is the top point
                if ratings[i]==ratings[i-1]: candies[i]=1
                else: candies[i]=candies[i-1]+1
                p=i
                raising=False
        elif ratings[i]<ratings[i+1]:
            if not raising: # i is the bottom point
                candies[i]=1
                for j in range(i-1,p-1,-1):
                    if ratings[j]==ratings[j+1]:
                        candies[j]=1
                    else:
                        candies[j]=max(candies[j+1]+1,candies[j]) if j==p else candies[j+1]+1
                raising=True
            else:
                if ratings[i]==ratings[i-1]: candies[i]=1
                else: candies[i]=candies[i-1]+1
        else:
            if raising:
                if ratings[i]==ratings[i-1]: candies[i]=1
                else: candies[i]=candies[i-1]+1
    return sum(candies)
```

optimize the code.
```python
def candy(ratings):
    raising,p,l=False,0,len(ratings)
    ratings,candies=ratings+[2**32],[-2**32]*l
    for i in range(l):
        if raising:
            if ratings[i]==ratings[i-1]: candies[i]=1
            else: candies[i]=candies[i-1]+1
            if ratings[i]>ratings[i+1]:
                p,raising=i,False
        else:
            if ratings[i]<ratings[i+1]:
                candies[i]=1
                for j in range(i-1,p-1,-1):
                    if ratings[j]==ratings[j+1]:
                        candies[j]=1
                    else:
                        candies[j]=max(candies[j+1]+1,candies[j]) if j==p else candies[j+1]+1
                raising=True
    return sum(candies)
```

[1,0,2]

[1,2,2]

[3,1,2,0,2]

[3,1,1,0,2]

[3,2,1,1,0,2,3,4,4,3,1]