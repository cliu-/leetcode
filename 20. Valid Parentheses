20. Valid Parentheses
Easy

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:
```
Input: "()"
Output: true
```
Example 2:
```
Input: "()[]{}"
Output: true
```
Example 3:
```
Input: "(]"
Output: false
```
Example 4:
```
Input: "([)]"
Output: false
```
Example 5:
```
Input: "{[]}"
Output: true
```

```python
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
```

1st answer. Failed at the case `"}"`.
```python
def isValid(s):
    if not s: return True
    stack=[]
    for c in s:
        if c=='(': stack.append(')')
        elif c=='{': stack.append('}')
        elif c=='[': stack.append(']') 
        elif c==')':
            if stack.pop()!=')': return False
        elif c=='}':
            if stack.pop()!='}': return False
        elif c==']':
            if stack.pop()!=']': return False
    return not bool(stack)
```

2nd answer, accepted.
```python
def isValid(s):
    if not s: return True
    stack=[]
    for c in s:
        if c=='(': stack.append(')')
        elif c=='{': stack.append('}')
        elif c=='[': stack.append(']') 
        elif c==')':
            if not stack or stack.pop()!=')': return False
        elif c=='}':
            if not stack or stack.pop()!='}': return False
        elif c==']':
            if not stack or stack.pop()!=']': return False
    return not bool(stack)
```