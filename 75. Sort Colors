75. Sort Colors
Medium

Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:
```
Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
```

Follow up:

- A rather straight forward solution is a two-pass algorithm using counting sort.
  First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.

- Could you come up with a one-pass algorithm using only constant space?

```python
class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
```

1st solution, counting sort as follow up described.
```python
def sortColors(nums):
    c0,c1,c2=0,0,0
    for n in nums:
        if n==0: c0+=1
        elif n==1: c1+=1
        elif n==2: c2+=1
    for i in range(len(nums)):
        if c0>0: 
            nums[i],c0=0,c0-1
            continue
        if c1>0: 
            nums[i],c1=1,c1-1
            continue
        if c2>0: 
            nums[i],c2=2,c2-1
            continue
```

2nd solution, with "constant space". Copied from problem solution page. Runtime: 12 ms, faster than 97.05% of Python online submissions for Sort Colors. Memory Usage: 11.9 MB, less than 12.82% of Python online submissions for Sort Colors.
```python
def sortColors(nums):
    if len(nums)<2: return
    j=0
    for i in range(len(nums)):
        if nums[i]==0:
            nums[i],nums[j]=nums[j],nums[i]
            j+=1
    j=len(nums)-1
    for i in range(len(nums)-1,-1,-1):
        if nums[i]==2:
            nums[i],nums[j]=nums[j],nums[i]
            j-=1
``` 

But the 2nd solution cannot solve the prolbem that if we have `n` colors(but not 3), the algorithm could not be used. But, the counting sort algorithm still works, I just need to change the `c0->cn` to an size n array, so the space is O(n).