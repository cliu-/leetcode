211. Add and Search Word - Data structure design
Medium

Design a data structure that supports the following two operations:

```
void addWord(word)
bool search(word)
```

search(word) can search a literal word or a regular expression string containing only letters `a-z` or `.`. A `.` means it can represent any one letter.

Example:

```
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
```

Note:
You may assume that all words are consist of lowercase letters a-z.


Runtime: 280 ms, faster than 88.56% of Python online submissions for Add and Search Word - Data structure design.
Memory Usage: 27.4 MB, less than 64.29% of Python online submissions for Add and Search Word - Data structure design.
```python
class WordDictionary(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.trie={}
        

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: None
        """
        t=self.trie
        for c in word:
            if c not in t:
                t[c]={}
            t=t[c]
        t['#']={}
        

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        def func(word,i,t):
            if i==len(word):
                return '#' in t
            if word[i]=='.':
                for v in t.values():
                    if func(word,i+1,v):
                        return True
                return False
            if word[i] not in t:
                return False
            return func(word,i+1,t[word[i]])
        return func(word, 0, self.trie)
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
```