324. Wiggle Sort II
Medium

Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example 1:

Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].
Example 2:

Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?


```python
class Solution(object):
    def wiggleSort(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
```


three-way partitioning solution. Runtime O(n*log(n))
https://en.wikipedia.org/wiki/Dutch_national_flag_problem
Runtime: 244 ms, faster than 28.64% of Python online submissions for Wiggle Sort II.
Memory Usage: 13.2 MB, less than 70.00% of Python online submissions for Wiggle Sort II.
```python
from heapq import heappush,heapreplace
def wiggleSort(nums):
    def find_kth_largest(nums,k):
        h=[]
        for n in nums:
            if len(h)==k:
                if n>h[0]:
                    heapreplace(h,n)
            else:
                heappush(h,n)
        return h[0]

    medium = find_kth_largest(nums,(len(nums)+1)//2)

    i,j=1,(len(nums)-1) if len(nums)&1 else (len(nums)-2)
    k=0
    while k<len(nums):
        if nums[k]>medium:
            if k<=i and k&1==1:
                k+=1
                continue
            nums[k],nums[i]=nums[i],nums[k]
            i=i+2
        elif nums[k]<medium:
            if k>=j and k&1==0:
                k+=1
                continue
            nums[k],nums[j]=nums[j],nums[k]
            j=j-2
        else:
            k+=1
```
