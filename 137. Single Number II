137. Single Number II
Medium

Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99


```python
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```

Space O(N), time O(N).
Runtime: 32 ms, faster than 99.31% of Python online submissions for Single Number II. Memory Usage: 13.8 MB, less than 36.36% of Python online submissions for Single Number II.
```python
def singleNumber(nums):
    return (sum(set(nums))*3-sum(nums))//2
```

Bitwise manipulation approach, copy from solution page.
```python
def singleNumber(self, nums: List[int]) -> int:
    seen_once = seen_twice = 0
    
    for num in nums:
        # first appearance: 
        # add num to seen_once 
        # don't add to seen_twice because of presence in seen_once
        
        # second appearance: 
        # remove num from seen_once 
        # add num to seen_twice
        
        # third appearance: 
        # don't add to seen_once because of presence in seen_twice
        # remove num from seen_twice
        seen_once = ~seen_twice & (seen_once ^ num)
        seen_twice = ~seen_once & (seen_twice ^ num)

    return seen_once
```