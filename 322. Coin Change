322. Coin Change
Medium

You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Note:
You may assume that you have an infinite number of each kind of coin.


```python
class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
```


Time limit exceed at `[3,7,405,436],8839`.
```python
def coinChange(coins, amount):
    map={}
    def func(coins, amount):
        # print('amount={}'.format(amount))
        if amount==0: return 0
        if amount in map: return map[amount]
        r=-1
        for c in coins:
            if amount<c: continue
            x=amount//c
            for y in xrange(1,x+1):
                z=func(coins,amount-y*c)
                if z==-1: continue
                if r==-1 or y+z<r:
                    r=y+z
        map[amount]=r
        return r
    return func(coins, amount)
```


Bottom-up DP.
Runtime: 1568 ms, faster than 16.15% of Python online submissions for Coin Change.
Memory Usage: 11.8 MB, less than 92.50% of Python online submissions for Coin Change.
```python
def coinChange(coins, amount):
    dp=[-1]*(amount+1)
    dp[0]=0
    for i in xrange(1,amount+1):
        for c in coins:
            if i<c: continue
            if i==c: dp[i]=1
            else:
                if dp[i-c]>0:
                    if dp[i]>0:
                        dp[i]=min(dp[i-c]+1,dp[i])
                    else:
                        dp[i]=dp[i-c]+1
    return dp[-1]
```


Optimize last answer.
Runtime: 864 ms, faster than 87.90% of Python online submissions for Coin Change.
Memory Usage: 12.1 MB, less than 45.00% of Python online submissions for Coin Change.
```python
def coinChange(coins, amount):
    dp=[-1]*(amount+1)
    dp[0]=0
    for c in coins:
        for i in xrange(c,amount+1):
            if i==c: 
                dp[i]=1
            else:
                if dp[i-c]>0:
                    if dp[i]>0:
                        dp[i]=min(dp[i-c]+1,dp[i])
                    else:
                        dp[i]=dp[i-c]+1
    return dp[-1]
```


Top-down DP.
Runtime: 1744 ms, faster than 10.93% of Python online submissions for Coin Change.
Memory Usage: 17.6 MB, less than 7.50% of Python online submissions for Coin Change.
```python
def coinChange(coins, amount):
    _MAX=2**31-1
    dp=[0]*(amount+1)
    dp[0]=0
    def func(coins, rm):
        if rm<0: return -1
        if rm==0: return 0
        if dp[rm]!=0: return dp[rm]
        r=_MAX
        for c in coins:
            x=func(coins, rm-c)
            if x>=0 and x+1<r:
                r=x+1
        dp[rm]=-1 if r==_MAX else r
        return r
    func(coins,amount)
    return dp[-1]
```


[186,419,83,408]
6249
20

[3,7,405,436]
8839