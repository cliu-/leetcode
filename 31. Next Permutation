31. Next Permutation
Medium

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

```python
class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
```

1st answer, accepted. Runtime: 28 ms, faster than 69.37%. Memory Usage: 11.8 MB, less than 39.62%.

```python
def nextPermutation(nums):
    if len(nums)<2: return nums
    def reverse(arr,i,j):
        while i<j: 
            arr[i],arr[j]=arr[j],arr[i]
            i,j=i+1,j-1
    def solve(arr,i):
        reverse(arr,i+1,len(arr)-1)
        v,l,r=arr[i],i+1,len(arr)-1
        while l<=r:
            m=l+((r-l)//2)
            if arr[m]<=v: 
                l=m+1
            else: 
                r=m-1
        arr[i],arr[l]=arr[l],arr[i]
    def func(arr,i=0):
        if i==len(arr)-1: return True
        if func(arr,i+1):
            if arr[i]>=arr[i+1]:
                if i==0: reverse(arr,0,len(arr)-1)
                return True
            else:
                solve(arr, i)
                return False
        else:
            return False
    func(nums)
    print(nums)
```

The theory of solving this problem:

![Alt text](31_Next_Permutation.gif)


nextPermutation([3,4,3,3,3,2,1])==[4,1,2,3,3,3,3]

nextPermutation([5,6,1,2,4,3,3,3,2,1])==[5,6,1,3,1,2,2,3,3,4]
nextPermutation([1,2,4,3,3,3,2,1])==[1,3,1,2,2,3,3,4]