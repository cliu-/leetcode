329. Longest Increasing Path in a Matrix
Hard

Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


```python
class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
```

Runtime: 484 ms, faster than 40.66% of Python online submissions for Longest Increasing Path in a Matrix.
Memory Usage: 17.9 MB, less than 11.11% of Python online submissions for Longest Increasing Path in a Matrix.
Runtime O(n**2)
```python
def longestIncreasingPath(matrix):
    memo={}
    def dfs(x,y,matrix):
        if (x,y) in memo:
            return memo[(x,y)]
        nb,l=[(-1,0),(1,0),(0,-1),(0,1)],1
        for xd,yd in nb:
            i,j=x+xd,y+yd
            if i<0 or j<0 or i>=len(matrix) or j>=len(matrix[0]):
                continue
            if matrix[x][y]<matrix[i][j]:
                l=max(l,dfs(i,j,matrix)+1)
        memo[(x,y)]=l
        return l
    ans=0
    for x in xrange(len(matrix)):
        for y in xrange(len(matrix[0])):
            ans=max(ans,dfs(x,y,matrix))
    return ans
```


[[9,9,4],[6,6,8],[2,1,1]]

[[1]]

[[3,4,5],[3,2,6],[2,2,1]]

[[7,7,5],[2,4,6],[8,2,0]]