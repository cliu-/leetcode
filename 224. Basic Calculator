224. Basic Calculator
Hard

Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .

Example 1:

Input: "1 + 1"
Output: 2
Example 2:

Input: " 2-1 + 2 "
Output: 3
Example 3:

Input: "(1+(4+5+2)-3)+(6+8)"
Output: 23

Note:
You may assume that the given expression is always valid.
Do not use the eval built-in library function.

```python
class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """

```

Runtime: 160 ms, faster than 41.69% of Python online submissions for Basic Calculator.
Memory Usage: 14 MB, less than 40.00% of Python online submissions for Basic Calculator.
```python
import string
def calculate(s):
    i,res,stack=0,0,[]
    while i<len(s):
        if s[i].isdigit():
            k=i
            while i<len(s) and s[i].isdigit():
                i+=1
            n=int(s[k:i])
            if stack and stack[-1]=='-':
                n=-n
                stack.pop()
            stack.append(n)
            continue
        elif s[i]=='(':
            stack.append('(')
        elif s[i]=='-':
            stack.append('-')
        elif s[i]==')':
            cur=0
            while stack[-1]!='(':
                cur+=stack.pop()
            stack.pop()
            if stack and stack[-1]=='-':
                cur=-cur
                stack.pop()
            stack.append(cur)
        i+=1
    while stack:
        n=stack.pop()
        if stack and stack[-1]=='-':
            n=-n
            stack.pop()
        res+=n
    return res
```


Recursive approach
Runtime: 132 ms, faster than 59.02% of Python online submissions for Basic Calculator.
Memory Usage: 14.1 MB, less than 30.00% of Python online submissions for Basic Calculator.
```python
import string
def calculate(s):
    def func(s,i):
        ans,is_ng=0,False
        while i<len(s):
            if s[i].isdigit():
                k=i
                while i<len(s) and s[i].isdigit():
                    i+=1
                ans=ans+(int(s[k:i])*(-1 if is_ng else 1))
                is_ng=False
                continue
            elif s[i]=='-':
                is_ng,i=True,i+1
            elif s[i]=='(':
                j,r=func(s,i+1)
                i,ans=j,ans+(r*(-1 if is_ng else 1))
                is_ng=False
            elif s[i]==')':
                i=i+1
                return (i,ans)
            else: i+=1
        return (i,ans)
    return func(s,0)[1]
```