325. Maximum Size Subarray Sum Equals k
Medium

Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:
Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.

Example 2:
Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.

Follow Up:
Can you do it in O(n) time?


```python
class Solution(object):
    def maxSubArrayLen(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
```

Runtime: 88 ms, faster than 99.66% of Python online submissions for Maximum Size Subarray Sum Equals k.
Memory Usage: 14.2 MB, less than 100.00% of Python online submissions for Maximum Size Subarray Sum Equals k.
```python
def maxSubArrayLen(nums, k):
    map={}
    ans=0
    for i in xrange(len(nums)):
        nums[i]=nums[i]+(nums[i-1] if i>0 else 0)
        r=nums[i]-k
        if r==0:
            if i+1>ans: ans=i+1
        elif r in map:
            if i-map[r]>ans: ans=i-map[r]
        if nums[i] not in map:
            map[nums[i]]=i
    return ans
```