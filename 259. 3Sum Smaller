259. 3Sum Smaller
Medium

Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]

Follow up: Could you solve it in O(n2) runtime?


```python
class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
```


Time complexity O(N**3)
Runtime: 1540 ms, faster than 5.62% of Python online submissions for 3Sum Smaller.
Memory Usage: 11.7 MB, less than 100.00% of Python online submissions for 3Sum Smaller.
```python
def threeSumSmaller(nums, target):
    if not nums: return 0
    nums,ans=sorted(nums),0
    for i in xrange(len(nums)-2):
        for j in xrange(i+1,len(nums)-1):
            k,c=len(nums)-1,target-(nums[i]+nums[j])
            while k>j and nums[k]>=c: k-=1
            ans+=(k-j if k>=j else 0)
            print('i={},j={},k={},c={}'.format(i,j,k,c))
    return ans
```


Do optimization.
Runtime: 88 ms, faster than 91.97% of Python online submissions for 3Sum Smaller.
Memory Usage: 11.8 MB, less than 40.00% of Python online submissions for 3Sum Smaller.
```python
def threeSumSmaller(nums, target):
    if not nums: return 0
    nums,ans=sorted(nums),0
    for i in xrange(len(nums)-2):
        c=target-nums[i]
        l,r=i+1,len(nums)-1
        while l<r:
            if nums[l]+nums[r]<c:
                ans+=r-l
                l+=1
            else:
                r-=1
    return ans
```


3sum solution
```python
def threeSum(nums):
    if len(nums)<3: return []
    nums,ans=sorted(nums),[]
    for i in xrange(len(nums)-2):
        if i>0 and nums[i]==nums[i-1]:
            continue
        c=-nums[i]
        l,r=i+1,len(nums)-1
        while l<r:
            t=nums[l]+nums[r]
            if t<c:
                while l+1<=r and nums[l]==nums[l+1]: l+=1
                l+=1
            elif t>c:
                while r-1>=l and nums[r]==nums[r-1]: r-=1
                r-=1
            else:
                ans.append([nums[i],nums[l],nums[r]])
                while l+1<=r and nums[l]==nums[l+1]: l+=1
                l+=1
                while r-1>=l and nums[r]==nums[r-1]: r-=1
                r-=1
    return ans
```

[-2,0,0,2,2]

[-2,0,1,1,2]

[-1,0,1,0]

[-1,0,1,2,-1,-4]

[-1,0,1,2,2,-1,-4]