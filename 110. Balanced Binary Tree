110. Balanced Binary Tree
Easy

Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
```

Runtime: 40 ms, faster than 76.88% of Python online submissions for Balanced Binary Tree.
Memory Usage: 17.4 MB, less than 6.25% of Python online submissions for Balanced Binary Tree.
```python
def isBalanced(root):
    def func(n):
        if not n: return 0
        l=r=0
        if n.left: l=func(n.left)
        if n.right: r=func(n.right)
        if l<0 or r<0 or abs(l-r)>1: return -1
        return 1+max(l,r)
    return func(root)>=0
```