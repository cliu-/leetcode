338. Counting Bits
Medium

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

1. It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
2. Space complexity should be O(n).
3. Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.


```python
class Solution(object):
    def countBits(self, num):
        """
        :type num: int
        :rtype: List[int]
        """
```

Runtime: 68 ms, faster than 79.30% of Python online submissions for Counting Bits.
Memory Usage: 13.9 MB, less than 72.73% of Python online submissions for Counting Bits.
```python
def countBits(num):
    arr=[0]*(num+1)
    base=0
    for i in xrange(1,num+1):
        if i&(i-1)==0:
            base=i
            arr[i]=1
        else:
            arr[i]=arr[i-base]+1
    return arr
```