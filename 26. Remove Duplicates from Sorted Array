26. Remove Duplicates from Sorted Array
Easy

Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:
```
Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
```
Example 2:
```
Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
```

*Clarification*:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:
```
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
```

```python
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```

1st answer, accepted. Analyse the answer carefully, do I really need to swap values of p0 and p1? do we really need to deal with `p0==0` case?
```python
def removeDuplicates(nums):
    if len(nums)<2 or len(set(nums))==len(nums):
        return len(nums)
    p0,p1,v=0,1,nums[0]
    while p1<len(nums):
        if nums[p1]==v:
            if p0==0:
                p0=p1
            p1=p1+1
        else:
            v=nums[p1]
            if p0!=0:
                nums[p0],nums[p1]=nums[p1],nums[p0]
                p0=p0+1
            p1=p1+1
    return p0
```

2nd answer. 1st answer and 2nd answer have same runtime and memory usage, but 2nd answer is more neat.
```python
def removeDuplicates(nums):
    if len(nums)<2 or len(set(nums))==len(nums):
        return len(nums)
    p0,p1=0,1
    while p1<len(nums):
        if nums[p0]!=nums[p1]:
            p0+=1
            nums[p0]=nums[p1]
        p1+=1
```