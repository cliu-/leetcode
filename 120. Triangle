120. Triangle
Medium

Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


```python
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
```


Time limit exceeded at a very large case.
```python
def minimumTotal(triangle):
    ans=[0]
    def func(t,last_i,level=0,c=[0]):
        if level==len(triangle):
            ans[0]=min(ans[0],c[0])
            return
        arr=t[level]
        for i in xrange(last_i,min(last_i+2,len(arr))):
            c[0]=c[0]+arr[i]
            func(t,i,level+1,c)
            c[0]=c[0]-arr[i]
    func(triangle, 0)
    return ans[0]
```

It still need extra space for caching.
Runtime: 48 ms, faster than 45.99% of Python online submissions for Triangle. Memory Usage: 14.8 MB, less than 16.67% of Python online submissions for Triangle.
```python
def minimumTotal(triangle):
    ans,map=[0],{}
    def func(t,last_i=0,level=0):
        if level==len(triangle): return 0
        if last_i>=len(t[level]): return 0
        if (level,last_i) not in map: 
            map[(level,last_i)]=t[level][last_i]+min(func(t,last_i,level+1), \
                func(t,last_i+1,level+1))
        return map[(level,last_i)]
    return func(triangle)
```

Dynamic programming solution.
Runtime: 36 ms, faster than 97.59% of Python online submissions for Triangle.
Memory Usage: 12.3 MB, less than 66.67% of Python online submissions for Triangle.
```python
def minimumTotal(triangle):
    dp=triangle[-1]
    for i in range(len(triangle)-2,-1,-1):
        for j in range(len(triangle[i])):
            dp[j]=triangle[i][j]+min(dp[j],dp[j+1])
    return dp[0]
```