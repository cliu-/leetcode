24. Swap Nodes in Pairs
Medium

Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example:
```
Given 1->2->3->4, you should return the list as 2->1->4->3.
```

```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
```

1st answer, accepted. Runtime: 20 ms, faster than 48.37%. Memory Usage: 11.9 MB, less than 9.09%.
```python
def swapPairs(head):
    if not head or not head.next:
        return head
    p0=ListNode(0)
    p0.next=head
    pre,p,arr=p0,head,[p0,head]
    while p:
        for i in range(2):
            arr[i]=p
            if p: p=p.next
        if arr[0] and arr[1]:
            nxt=arr[1].next
            pre.next=arr[1]
            arr[1].next=arr[0]
            arr[0].next=nxt
        pre,p=arr[0],arr[0].next
    return p0.next
```