290. Word Pattern
Easy

Given a pattern and a string str, find if str follows the same pattern.

Here *follow* means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true

Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false

Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false

Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false

Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.


```python
class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
```



Runtime: 20 ms, faster than 37.52% of Python online submissions for Word Pattern.
Memory Usage: 11.7 MB, less than 50.00% of Python online submissions for Word Pattern.
```python
def wordPattern(pattern, str):
    w,j,map,seen='',0,{},set()
    for i in xrange(len(str)+1):
        if i==len(str) or str[i]==' ':
            print('i={},j={},w={},map={},seen={}'.format(i,j,w,map,seen))
            if pattern[j] in map:
                if w in seen and map[pattern[j]]!=w:
                    return False
                if w not in seen:
                    return False
            else:
                if w in seen: return False
                map[pattern[j]]=w
                seen.add(w)
            w,j='',j+1
        else:
            w+=str[i]
        if i==len(str) and j<len(pattern):
            print('case1,i={},={}'.format(i,j))
            return False
        if i<len(str) and j==len(pattern):
            print('case2,i={},={}'.format(i,j))
            return False
    return True
```


"abbaa"
"dog cat cat dog dog"