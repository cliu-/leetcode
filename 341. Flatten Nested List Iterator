341. Flatten Nested List Iterator
Medium

Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:

Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6].





The idea of this answer is to eliminate the recursive by iteration(stack).
Runtime: 96 ms, faster than 13.04% of Python online submissions for Flatten Nested List Iterator.
Memory Usage: 18 MB, less than 12.90% of Python online submissions for Flatten Nested List Iterator.
```python
# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger(object):
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """


def func(ls, i, stack):
    while ls or stack:
        if ls:
            if i<len(ls):
                if ls[i].isInteger():
                    return (ls,i)
                else:
                    stack.append((ls,i+1))
                    ls,i=ls[i].getList(),0
            else:
                ls=None
        else:
            ls,i=stack.pop()
            if i>=len(ls):
                ls=None
    return (None,0)


class NestedIterator(object):

    def __init__(self, nestedList):
        """
        Initialize your data structure here.
        :type nestedList: List[NestedInteger]
        """
        self.ls=nestedList
        self.stack=[]
        self.i=0
        self.ls,self.i=func(self.ls,self.i,self.stack)
        

    def next(self):
        """
        :rtype: int
        """
        r=self.ls[self.i]
        self.ls,self.i=func(self.ls,self.i+1,self.stack)
        return r
        

    def hasNext(self):
        """
        :rtype: bool
        """
        return self.ls or self.stack
        

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())

```


[[[[]]]]

[0]

[[],1,[4,[],[[0],[]],[6],[]],[]]