97. Interleaving String
Hard

Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false

```python
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
```

Runtime: 32 ms, faster than 39.08% of Python online submissions for Interleaving String.
Memory Usage: 11.8 MB, less than 62.50% of Python online submissions for Interleaving String.
```python
def isInterleave(s1, s2, s3):
    if s1==s2==s3=='': return True
    if len(s1)+len(s2)!=len(s3): return False
    if set(s1)|set(s2)!=set(s3): return False
    dp=[[-1]*(len(s2)+1) for _ in range(len(s1)+1)]
    dp[0][0]=0
    for i in range(1,len(dp)):
        if s1[i-1]==s3[i-1]: dp[i][0]=i
        else: break
    for i in range(1,len(dp[0])):
        if s2[i-1]==s3[i-1]: dp[0][i]=i
        else: break
    print(dp)
    k=1
    for i in range(1,len(dp)):#s1
        for j in range(1,len(dp[0])):#s2
            m,n=dp[i-1][j],dp[i][j-1]
            if (m>0 and s1[i-1]==s3[m]) or (n>0 and s2[j-1]==s3[n]):
                dp[i][j]=max(m,n)+1
    return dp[-1][-1]==len(s3)
```