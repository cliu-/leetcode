113. Path Sum II
Medium

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
```

Runtime: 32 ms, faster than 85.88% of Python online submissions for Path Sum II.Memory Usage: 14.7 MB, less than 64.29% of Python online submissions for Path Sum II.
```python
def pathSum(root, sum):
    ans=[]
    def func(n,v,cur=[]):
        if not n: return
        if n.val==v and not n.left and not n.right:
            ans.append(cur+[v])
            return
        cur.append(n.val)
        if n.left: func(n.left,v-n.val)
        if n.right: func(n.right,v-n.val)
        cur.pop()
    func(root, sum)
    return ans
```