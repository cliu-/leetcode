166. Fraction to Recurring Decimal
Medium

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

Example 1:
Input: numerator = 1, denominator = 2
Output: "0.5"

Example 2:
Input: numerator = 2, denominator = 1
Output: "2"

Example 3:
Input: numerator = 2, denominator = 3
Output: "0.(6)"


```python
class Solution(object):
    def fractionToDecimal(self, numerator, denominator):
        """
        :type numerator: int
        :type denominator: int
        :rtype: str
        """
```


Runtime: 20 ms, faster than 53.70% of Python online submissions for Fraction to Recurring Decimal.
Memory Usage: 13.1 MB, less than 25.00% of Python online submissions for Fraction to Recurring Decimal.
```python
def fractionToDecimal(numerator, denominator):
    memo={}
    def func(n1,n2,cur=''):
        if n1==0:
            return cur
        if n1 in memo:
            a,s=memo[n1][0],memo[n1][1]
            while a!=n1:
                s,a=s+memo[a][1],memo[a][0]
            return cur.replace(s,'')+'('+s+')'
        tmp,n='',n1
        if n<n2: n=n*10
        while n<n2: n,tmp=n*10,tmp+'0'
        q=n//n2
        r,tmp=n-n2*q,tmp+str(q)
        memo[n1]=(r,tmp)
        # print('{}/{}={},r={},cur={}'.format(n1,n2,q,r,cur+tmp))
        return func(r,n2,cur+tmp)
    n1,n2,f=abs(numerator),abs(denominator),True if numerator*denominator<0 else False
    res=''
    if n1>=n2:
        q=n1//n2
        r=n1-n2*q
        res=res+str(q)
        n1=r
    dec=func(n1,n2)
    return ('-' if f else '')+('0' if not res else res) + (('.'+dec) if dec else '')
```

1,6
4,9
4,333