123. Best Time to Buy and Sell Stock III
Hard

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:
```
Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
```

Example 2:
```
Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
```

Example 3:
```
Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
```

```python
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
```

Wrong answer.
```python
def maxProfit(self, prices):
    if not prices: return 0
    b,s,mb,ms=-prices[0],0,-prices[0],0
    for i in range(1,len(prices)):
        b=ms-prices[i]
        s=max(mb+prices[i],0)
        mb=max(b,mb)
        ms=max(s,ms)
        print('{}, b={},s={},mb={},ms={}'.format(prices[i],b,s,mb,ms))
    return ms
```

Runtime: 60 ms, faster than 73.37% of Python online submissions for Best Time to Buy and Sell Stock III.
Memory Usage: 12.7 MB, less than 81.82% of Python online submissions for Best Time to Buy and Sell Stock III.
```python
def maxProfit(prices):
    max_b1,s1,max_s1=-2**32,0,-2**32
    max_b2,s2,max_s2=-2**32,0,0
    for i in range(len(prices)):
        s1=max(max_b1+prices[i],0)
        if i>1: 
            b2=max_s1-prices[i]
            s2=max(max_b2+prices[i],0)
            max_b2=max(b2,max_b2)
            max_s2=max(max_s2,s2)
        max_b1=max(max_b1,-prices[i])
        max_s1=max(max_s1,s1)
        print('{}:max_b1={},s1={},max_s1={},max_b2={},s2={},max_s2={}'.format(prices[i],max_b1,s1,max_s1,max_b2,s2,max_s2))
    return max(max_s1,max_s2)
```

[3,3,5,0,0,3,1,4] == 6
[1,2,3,4,5] == 4
[7,6,4,3,1] == 0
[7,1,5,3,6,4] == 7
[7,1,5,3,0,3,4,6,4] == 10