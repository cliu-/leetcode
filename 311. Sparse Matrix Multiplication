311. Sparse Matrix Multiplication
Medium

Given two sparse matrices A and B, return the result of AB.

You may assume that A's column number is equal to B's row number.

Example:

Input:

A = [
  [ 1, 0, 0],
  [-1, 0, 3]
]

B = [
  [ 7, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 1 ]
]

Output:

     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
                  | 0 0 1 |



```python
class Solution(object):
    def multiply(self, A, B):
        """
        :type A: List[List[int]]
        :type B: List[List[int]]
        :rtype: List[List[int]]
        """
```


Naive solution.
Runtime: 168 ms, faster than 7.86% of Python online submissions for Sparse Matrix Multiplication.
Memory Usage: 11.9 MB, less than 83.33% of Python online submissions for Sparse Matrix Multiplication.
```python
def multiply(A, B):
    m,n,o=len(A),len(A[0]),len(B[0])
    C=[[0]*o for _ in xrange(m)]
    for i in xrange(m):
        for j in xrange(o):
            for k in xrange(n):
                C[i][j]+=A[i][k]*B[k][j]
    return C
```


Smart solution.
https://leetcode.com/problems/sparse-matrix-multiplication/discuss/76151/54ms-detailed-summary-of-easiest-java-solutions-beating-999
Runtime: 36 ms, faster than 97.17% of Python online submissions for Sparse Matrix Multiplication.
Memory Usage: 11.9 MB, less than 66.67% of Python online submissions for Sparse Matrix Multiplication.
```python
def multiply(A, B):
    m,n,o=len(A),len(A[0]),len(B[0])
    C=[[0]*o for _ in xrange(m)]
    for i in xrange(m):
        for k in xrange(n):
            if A[i][k]!=0:
                for j in xrange(o):
                    C[i][j]+=A[i][k]*B[k][j]
    return C
```

[[1,-5]]
[[12],[-1]]


[[1,0,0],[-1,0,3]]
[[7,0,0],[2,0,0],[3,0,1]]
=
[[7,0,0],[2,0,3]]