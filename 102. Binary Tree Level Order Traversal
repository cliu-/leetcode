102. Binary Tree Level Order Traversal
Medium

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree `[3,9,20,null,null,15,7]`,
```
    3
   / \
  9  20
    /  \
   15   7
```
return its level order traversal as:
```
[
  [3],
  [9,20],
  [15,7]
]
```

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """

```

Runtime: 20 ms, faster than 79.25% of Python online submissions for Binary Tree Level Order Traversal.
Memory Usage: 12.2 MB, less than 66.18% of Python online submissions for Binary Tree Level Order Traversal.
```python
from collections import deque
def levelOrder(root):
    if not root: return []
    ans,q=[],deque([root])
    while q:
        l,cur=len(q),[]
        for _ in range(l):
            e=q.popleft()
            cur.append(e.val)
            if e.left: q.append(e.left)
            if e.right: q.append(e.right)
        ans.append(cur)
    return ans
```