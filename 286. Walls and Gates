286. Walls and Gates
Medium

You are given a m x n 2D grid initialized with these three possible values.

1. -1  - A wall or an obstacle.
2. 0   - A gate.
3. INF - Infinity means an empty room. We use the value 2**31 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4

```python
class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
```

Bad solution. This is not breath-first-search.
```python
def wallsAndGates(rooms):
    if not rooms: return
    l=(len(rooms),len(rooms[0]))
    if not l[0]: return
    def func(x,y,d,seen):
        # print('visit ({},{}),d={}, seen={}'.format(x,y,d,seen))
        q,arr=[],[(x-1,y),(x+1,y),(x,y-1),(x,y+1)]
        v=2147483647
        for x1,y1 in arr:
            if (x1,y1) in seen or x1<0 or y1<0 or x1>=l[0] or y1>=l[1] \
                or rooms[x1][y1] in {0,-1}:
                continue
            if rooms[x1][y1]<2147483647 and rooms[x1][y1]+1<v:
                v=rooms[x1][y1]+1
            if d<rooms[x1][y1]: rooms[x1][y1]=d
            q.append((x1,y1))
        seen.add((x,y))
        if v<rooms[x][y]: rooms[x][y]=v
        while q:
            x1,y1=q.pop()
            func(x1,y1,d+1,seen)
    for x in range(l[0]):
        for y in range(l[1]):
            if rooms[x][y]==0:
                # print('find ({},{})'.format(x,y))
                func(x,y,1,set())
                # print('rooms={}'.format(rooms))
```


Runtime: 228 ms, faster than 90.98% of Python online submissions for Walls and Gates.
Memory Usage: 15.3 MB, less than 33.33% of Python online submissions for Walls and Gates.
```python
from collections import deque
def wallsAndGates(rooms):
    if not rooms: return
    m,n,inf=len(rooms),len(rooms[0]),2147483647
    q=deque()
    for i in range(m):
        for j in range(n):
            if rooms[i][j]==0:
                q.append((i,j))
    while q:
        x,y=q.popleft()
        arr=[(x-1,y),(x+1,y),(x,y-1),(x,y+1)]
        for x1,y1 in arr:
            if x1<0 or y1<0 or x1>=m or y1>=n \
                or rooms[x1][y1]!=inf:
                continue
            rooms[x1][y1]=rooms[x][y]+1
            q.append((x1,y1))
```



[[0,2147483647,-1,2147483647,2147483647,-1,-1,0,0,-1,2147483647,2147483647,0,-1,2147483647,2147483647,2147483647,2147483647,0,2147483647,0,-1,-1,-1,-1,2147483647,-1,-1,2147483647,2147483647,-1,-1,0,0,-1,0,0,0,2147483647,0,2147483647,-1,-1,0,-1,0,0,0,2147483647],[2147483647,0,-1,2147483647,0,-1,-1,-1,-1,0,0,2147483647,2147483647,-1,-1,2147483647,-1,-1,2147483647,2147483647,-1,0,-1,2147483647,0,2147483647,-1,2147483647,0,2147483647,0,2147483647,-1,2147483647,0,2147483647,-1,2147483647,0,2147483647,2147483647,0,-1,2147483647,-1,-1,-1,0,2147483647]]


[[0,1,-1,2,1,-1,-1,0,0,-1,1,1,0,-1,4,3,2,1,0,1,0,-1,-1,-1,-1,2,-1,-1,1,2,-1,-1,0,0,-1,0,0,0,1,0,1,-1,-1,0,-1,0,0,0,1],[1,0,-1,1,0,-1,-1,-1,-1,0,0,1,1,-1,-1,4,-1,-1,1,2,-1,0,-1,1,0,1,-1,1,0,1,0,1,-1,1,0,1,-1,1,0,1,1,0,-1,1,-1,-1,-1,0,1]]



[[-1,0,2147483647,2147483647,0,0,2147483647,2147483647,-1,0,0,-1,-1,2147483647,-1,-1,2147483647,2147483647,2147483647,0,0,-1,2147483647,-1,-1,-1,0,2147483647,0,0,0,-1,2147483647,0,0,2147483647,-1,-1,0,0,-1,0,2147483647,2147483647,-1,2147483647],[0,-1,0,-1,0,0,0,-1,-1,0,-1,2147483647,2147483647,-1,2147483647,-1,2147483647,-1,-1,2147483647,0,-1,2147483647,0,2147483647,0,-1,2147483647,0,-1,-1,2147483647,0,2147483647,0,2147483647,-1,2147483647,2147483647,2147483647,-1,0,-1,2147483647,0,2147483647],[2147483647,-1,-1,2147483647,0,0,0,2147483647,-1,0,-1,-1,2147483647,2147483647,2147483647,2147483647,-1,2147483647,0,0,2147483647,0,-1,0,0,2147483647,2147483647,0,0,2147483647,-1,-1,0,2147483647,0,2147483647,-1,-1,2147483647,2147483647,0,-1,2147483647,-1,-1,-1],[2147483647,-1,-1,2147483647,0,-1,-1,-1,-1,-1,0,-1,-1,2147483647,0,-1,-1,-1,2147483647,2147483647,-1,2147483647,-1,-1,-1,0,-1,-1,0,-1,0,-1,2147483647,2147483647,2147483647,2147483647,2147483647,0,0,2147483647,2147483647,2147483647,2147483647,0,2147483647,2147483647],[2147483647,2147483647,2147483647,-1,-1,2147483647,2147483647,-1,0,2147483647,-1,0,0,2147483647,2147483647,0,2147483647,-1,-1,2147483647,0,0,0,-1,2147483647,0,2147483647,-1,2147483647,0,0,-1,0,2147483647,-1,0,-1,-1,2147483647,-1,0,0,-1,-1,-1,-1],[-1,-1,2147483647,2147483647,0,2147483647,0,0,2147483647,2147483647,0,-1,0,2147483647,-1,2147483647,2147483647,0,2147483647,2147483647,-1,0,0,2147483647,-1,-1,0,-1,2147483647,0,0,0,0,0,2147483647,0,0,-1,0,0,-1,0,-1,0,0,-1]]




[[-1,0,1,1,0,0,1,2,-1,0,0,-1,-1,2147483647,-1,-1,3,2,1,0,0,-1,2,-1,-1,-1,0,1,0,0,0,-1,1,0,0,1,-1,-1,0,0,-1,0,1,2,-1,2],[0,-1,0,-1,0,0,0,-1,-1,0,-1,5,4,-1,4,-1,4,-1,-1,1,0,-1,1,0,1,0,-1,1,0,-1,-1,1,0,1,0,1,-1,2,1,1,-1,0,-1,1,0,1],[1,-1,-1,1,0,0,0,1,-1,0,-1,-1,3,2,1,4,-1,1,0,0,1,0,-1,0,0,1,1,0,0,1,-1,-1,0,1,0,1,-1,-1,1,1,0,-1,2,-1,-1,-1],[2,-1,-1,1,0,-1,-1,-1,-1,-1,0,-1,-1,1,0,-1,-1,-1,1,1,-1,1,-1,-1,-1,0,-1,-1,0,-1,0,-1,1,2,1,1,1,0,0,1,1,1,1,0,1,2],[3,4,3,-1,-1,2,1,-1,0,1,-1,0,0,1,1,0,1,-1,-1,1,0,0,0,-1,1,0,1,-1,1,0,0,-1,0,1,-1,0,-1,-1,1,-1,0,0,-1,-1,-1,-1],[-1,-1,2,1,0,1,0,0,1,1,0,-1,0,1,-1,1,1,0,1,2,-1,0,0,1,-1,-1,0,-1,1,0,0,0,0,0,1,0,0,-1,0,0,-1,0,-1,0,0,-1]]

[[-1,0,1,1,0,0,1,2,-1,0,0,-1,-1,2147483647,-1,-1,3,2,1,0,0,-1,2,-1,-1,-1,0,1,0,0,0,-1,1,0,0,1,-1,-1,0,0,-1,0,1,2,-1,2],[0,-1,0,-1,0,0,0,-1,-1,0,-1,5,4,-1,2,-1,4,-1,-1,1,0,-1,1,0,1,0,-1,1,0,-1,-1,1,0,1,0,1,-1,2,1,1,-1,0,-1,1,0,1],[1,-1,-1,1,0,0,0,1,-1,0,-1,-1,3,2,1,2,-1,1,0,0,1,0,-1,0,0,1,1,0,0,1,-1,-1,0,1,0,1,-1,-1,1,1,0,-1,2,-1,-1,-1],[2,-1,-1,1,0,-1,-1,-1,-1,-1,0,-1,-1,1,0,-1,-1,-1,1,1,-1,1,-1,-1,-1,0,-1,-1,0,-1,0,-1,1,2,1,1,1,0,0,1,1,1,1,0,1,2],[3,4,3,-1,-1,2,1,-1,0,1,-1,0,0,1,1,0,1,-1,-1,1,0,0,0,-1,1,0,1,-1,1,0,0,-1,0,1,-1,0,-1,-1,1,-1,0,0,-1,-1,-1,-1],[-1,-1,2,1,0,1,0,0,1,1,0,-1,0,1,-1,1,1,0,1,2,-1,0,0,1,-1,-1,0,-1,1,0,0,0,0,0,1,0,0,-1,0,0,-1,0,-1,0,0,-1]]