167. Two Sum II - Input array is sorted
Easy

Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.
Example:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.


```python
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
```

Binary search solution.
Runtime: 72 ms, faster than 6.83% of Python online submissions for Two Sum II - Input array is sorted.
Memory Usage: 12 MB, less than 45.45% of Python online submissions for Two Sum II - Input array is sorted.
```python
def twoSum(numbers, target):
    if len(numbers)<2: return []
    if len(numbers)==2:
        return [] if sum(numbers)!=target else [1,2]
    def func(i, target):
        s=target-numbers[i]
        l=r=-1
        if i!=0 and numbers[0]<=s<=numbers[i]:
            l,r=0,i-1
        elif i!=len(numbers)-1 and numbers[i]<=s<=numbers[-1]:
            l,r=i+1,len(numbers)-1
        else:
            return -1
        while l<=r:
            m=l+(r-l)//2
            if numbers[m]<s:
                l=m+1
            elif numbers[m]>s:
                r=m-1
            else:
                return m
        return -1
    for i in xrange(len(numbers)):
        j=func(i, target)
        if j>-1:
            i,j=i+1,j+1
            return [min(j,i),max(j,i)]
    return []
```

Two pointers solution.
Runtime: 52 ms, faster than 45.74% of Python online submissions for Two Sum II - Input array is sorted.
Memory Usage: 12 MB, less than 65.45% of Python online submissions for Two Sum II - Input array is sorted.
```python
def twoSum(numbers, target):
    if len(numbers)<2: return []
    if len(numbers)==2:
        return [] if sum(numbers)!=target else [1,2]
    p1,p2=0,len(numbers)-1
    while p1<p2:
        s1=target-numbers[p1]
        if s1<numbers[p1]: return []
        s2=target-numbers[p2]
        if s2>numbers[p2]: return []
        while s2<=numbers[p1]:
            if s2==numbers[p1]: return [p1+1,p2+1]
            p2=p2-1
            s2=target-numbers[p2]
        while s1>=numbers[p2]:
            if s1==numbers[p2]: return [p1+1,p2+1]
            p1+=1
            s1=target-numbers[p1]
    return []
```

Very neat and clean code for two pointers solution.
```python
def twoSum(numbers, target):
    start = 0
    end = len(numbers)-1
    while start < end:
        s = numbers[start] + numbers[end]
        if s == target:
            return [start+1,end+1]
        elif s < target:
            start += 1
        else:
            end -= 1
    return []
```

[2,7,11,15],9 == [1,2]
[-1,1,1,1,1,2,7,9,11,15],11 == [6,8]
[2,3,4], 6 == [1,3]
[0,0,3,4],0 == [1,2]