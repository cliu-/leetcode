53. Maximum Subarray
Easy

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

```python
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```

1st answer. Runtime: 52 ms, faster than 58.12% of Python online submissions for Maximum Subarray. Memory Usage: 12.6 MB, less than 20.51% of Python online submissions for Maximum Subarray.
```python
def maxSubArray(nums):
    if not nums: return 0
    ans=-2**31
    for i in range(len(nums)):
        if i>0:
            nums[i]=max((nums[i]+nums[i-1]),nums[i])
        if ans<nums[i]: ans=nums[i]
    return ans
```

maxSubArray([-3])
maxSubArray([-2,1,-3,4,-1,2,1,-5,4])