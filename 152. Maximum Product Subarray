152. Maximum Product Subarray
Medium

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


```python
class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```

Failed at the case `[-2,3,-4]`.
```python
def maxProduct(nums):
    if not nums: return 0
    dp=[1]*(len(nums)+1)
    for i in range(len(nums)):
        dp[i+1]=max(nums[i],nums[i]*dp[i])
    return max(dp[1:])
```

Runtime: 44 ms, faster than 42.32% of Python online submissions for Maximum Product Subarray.
Memory Usage: 14.2 MB, less than 5.26% of Python online submissions for Maximum Product Subarray.
```python
def maxProduct(nums):
    if not nums: return 0
    dp=[(1,1)]*(len(nums)+1)
    for i in range(len(nums)):
        if nums[i]>0:
            p=max(nums[i],nums[i]*dp[i][0])
            n=min(nums[i],nums[i]*dp[i][1])
        elif nums[i]<0:
            p=max(nums[i],nums[i]*dp[i][1])
            n=min(nums[i],nums[i]*dp[i][0])
        else:
            p=n=0
        dp[i+1]=(p,n)
    return max([e[0] for e in dp[1:]])
```

[-2,3,-4]

[-2]
