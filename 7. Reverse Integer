7. Reverse Integer
Easy

2540

3962

Favorite

Share
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’2**31,  2**31 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """

assert(reverse(-2147483648)==0)
assert(reverse(-2147483642)==0)
assert(reverse(-2147483641)==-1463847412)
assert(reverse(0)==0)
assert(reverse(2147483647)==0)
assert(reverse(2147483643)==0)
assert(reverse(2147483641)==1463847412)
assert(reverse(10)==1)
assert(reverse(1000)==1)
assert(reverse(-10050)==-5001)

def reverse(x):
    if -10<x<10: return x
    def to_arr(n):
        if n<0: n=-n
        arr=[]
        while n>=10:
            arr+=[n%10]
            n=n//10
        return arr+[n]
    l1,l2=to_arr(2**31),to_arr(2**31-1)
    a,p=to_arr(abs(x)),l1 if x<0 else l2
    while a[0]==0: a=a[1:]
    f,i,ans=len(a)==len(p),len(a)-1,0
    print('p={}\na={}\nf={}'.format(p,a,f))
    while i>-1:
        if f:
            if a[len(p)-1-i]>p[i]:
                return 0
            elif a[len(p)-1-i]==p[i]:
                f=True
            else:
                f=False
        ans=ans+(a[i]*(10**(len(a)-1-i)))
        print(ans)
        i-=1
    return ans*(-1 if x<0 else 1)
        
The most submissions look like below. And the process of such solution is, first, do the integer reverse, finaly, do the overflow checking. This approach would not be working in a 32bit system, because after the first step, the reversed integer has been overflow already!! It could work with Python, but if the language is JAVA or C/C++, it does not work.

class Solution(object):
    def reverse(self, x):
        rev = 0 
        negative = False
        
        if x<0:
            x*=-1
            negative=True
       
        while x !=0:
            pop = x % 10
            x /= 10 
            rev = rev *10 + pop
                 
        if abs(rev) > (2 ** 31 - 1):
           return 0
        
        if negative is True:
            return -rev
            
        return rev 






