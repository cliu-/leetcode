209. Minimum Size Subarray Sum
Medium

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

```python
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
```

Runtime: 56 ms, faster than 84.62% of Python online submissions for Minimum Size Subarray Sum.
Memory Usage: 13.9 MB, less than 31.58% of Python online submissions for Minimum Size Subarray Sum.
```python
def minSubArrayLen(s: int, nums: List[int]) -> int:
    if not nums: return 0
    p1,p2,_sum=0,1,nums[0]
    res=0
    while p1<=len(nums) and p2<=len(nums):
        while _sum>=s and p1<p2:
            if res==0 or p2-p1<res: res=p2-p1
            _sum,p1=_sum-nums[p1],p1+1
        if _sum<s and p2<len(nums):
            _sum=_sum+nums[p2]
        p2=p2+1
    return res
```