72. Edit Distance
Hard

Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

```python
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
```

Dynamic programming answer. Runtime: 136 ms, faster than 84.52% of Python online submissions for Edit Distance. Memory Usage: 15 MB, less than 25.00% of Python online submissions for Edit Distance.
The key of this answer is `if word1[i-1]==word2[j-1]: dp[i][j]=dp[i-1][j-1]`.
```python
def minDistance(word1, word2):
    if not word1 and not word2: return 0
    if not word1 or not word2: return len(word1)+len(word2)
    dp=[[0]*(len(word2)+1) for _ in range(len(word1)+1)]
    for i in range(len(dp)): dp[i][0]=i
    for i in range(len(dp[0])): dp[0][i]=i
    for i in range(1,len(dp)):
        for j in range(1,len(dp[0])):
            if word1[i-1]==word2[j-1]: dp[i][j]=dp[i-1][j-1]
            else: dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1
    return dp[-1][-1]
```

minDistance('horse', 'ros') == 3
minDistance('intention', 'execution') == 5

minDistance("zoologicoarchaeologist", "zoogeologist") == 10
