301. Remove Invalid Parentheses
Hard

Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Example 1:

Input: "()())()"
Output: ["()()()", "(())()"]
Example 2:

Input: "(a)())()"
Output: ["(a)()()", "(a())()"]
Example 3:

Input: ")("
Output: [""]


```python
class Solution(object):
    def removeInvalidParentheses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """

```

Runtime: 596 ms, faster than 17.24% of Python online submissions for Remove Invalid Parentheses.
Memory Usage: 14.4 MB, less than 10.53% of Python online submissions for Remove Invalid Parentheses.
```python
def removeInvalidParentheses(s):
    if not s: return ['']
    def check(s):
        l=r=0
        for e in s:
            if e=='(':
                l+=1
            elif e==')':
                if l>0: l-=1
                else: r+=1
        return (l,r)
    l,r=check(s)
    print('l={},r={}'.format(l,r))
    if l==0 and r==0: return [s]
    ans,seen=set(),set()
    def func(s,i,l,r,cur=''):
        for j in xrange(i,len(s)):
            if s[j]=='(' and l>0:
                func(s,j+1,l-1,r,cur)
            if s[j]==')' and r>0:
                func(s,j+1,l,r-1,cur)
            cur+=s[j]
        if cur in seen: return
        seen.add(cur)
        tl,tr=check(cur)
        if tl==tr==0:
            print('found {}'.format(cur))
            ans.add(cur[:])
    func(s,0,l,r)
    return list(ans)
```

Do some refactor.
Runtime: 132 ms, faster than 61.31% of Python online submissions for Remove Invalid Parentheses.
Memory Usage: 14.5 MB, less than 10.53% of Python online submissions for Remove Invalid Parentheses.
```python
def removeInvalidParentheses(s):
    if not s: return ['']
    def check(s):
        l=r=0
        for e in s:
            if e=='(':
                l+=1
            elif e==')':
                if l>0: l-=1
                else: r+=1
        return (l,r)
    l,r=check(s)
    print('l={},r={}'.format(l,r))
    if l==0 and r==0: return [s]
    ans,seen=set(),set()
    def func(s,l,r):
        if s in seen: return
        if l==r==0 and check(s)==(0,0):
            ans.add(s)
            return
        for i in xrange(len(s)):
            if s[i]=='(' and l>0:
                func(s[:i]+s[i+1:],l-1,r)
            if s[i]==')' and r>0:
                func(s[:i]+s[i+1:],l,r-1)
        seen.add(s)
    func(s,l,r)
    return ans
```

"()())()"


"( ) ) ) ( ( ( )"

"(a)())()"