261. Graph Valid Tree
Medium

Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true

Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false

Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.


```python
class Solution(object):
    def validTree(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: bool
        """
```

Runtime: 80 ms, faster than 51.34% of Python online submissions for Graph Valid Tree.
Memory Usage: 13.2 MB, less than 75.00% of Python online submissions for Graph Valid Tree.
```python
def validTree(n, edges):
    m=[[] for _ in xrange(n)]
    for e in edges:
        m[e[0]].append(e[1])
        m[e[1]].append(e[0])
    print(m)
    q,visited=deque([0]),set()
    while q:
        v,f=q.popleft(),False
        visited.add(v)
        print('v={},m[v]={}'.format(v,m[v]))
        for c in m[v]:
            if c in visited:
                if f: return False
                f=True
                continue
            q.append(c)
    print(visited)
    return len(visited)==n
```