162. Find Peak Element
Medium

A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.


```python
class Solution(object):
    def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```


Runtime: 44 ms, faster than 6.14% of Python online submissions for Find Peak Element.
Memory Usage: 12.1 MB, less than 8.11% of Python online submissions for Find Peak Element.
```python
def findPeakElement(nums):
    if not nums: return -1
    if len(nums)==1: return 0
    def func(l,r):
        m=l+(r-l)//2
        if ((m==0 and nums[m]>nums[m+1])
            or (m==len(nums)-1 and nums[m]>nums[m-1])
            or (m+1<len(nums) and nums[m]>nums[m+1] and m-1>-1 and nums[m]>nums[m-1])):
            return m
        else:
            if l>=r: return -1
        if m+1<len(nums) and nums[m]>nums[m+1]:
            k = func(m+1,r)
            if k>-1: return k
        if m-1>-1 and nums[m]>nums[m-1]:
            k = func(l,m-1)
            if k>-1: return k
        if m+1<len(nums) and nums[m]<nums[m+1]:
            k = func(m+1,r)
            if k>-1: return k
        if m-1>-1 and nums[m]<nums[m-1]:
            k = func(l,m-1)
            if k>-1: return k
        return -1
    return func(0,len(nums)-1)
```


Runtime: 28 ms, faster than 88.75% of Python online submissions for Find Peak Element.
Memory Usage: 12.1 MB, less than 8.11% of Python online submissions for Find Peak Element.
```python
def findPeakElement(nums):
    if len(nums)==1: return 0
    def func(l,r):
        if l==r: return l
        m=l+(r-l)//2
        if nums[m]>nums[m+1]:
            return func(l,m)
        return func(m+1,r)
    return func(0,len(nums)-1)
```

how binary search works, especially for iteration, when does need to retun left index, when does need to return right index?
```python
def findPeakElement(nums):
    if len(nums)==1: return 0
    l,r=0,len(nums)-1
    while l<r:
        m=l+(r-l)//2
        if nums[m]>nums[m+1]:
            r=m
        else:
            l=m+1
    return r
```

[3,4]
[1,2,3,4]
[2,1]
[1,2,1]