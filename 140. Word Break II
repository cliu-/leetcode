140. Word Break II
Hard

Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]


```python
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
```



The difference of #139, this needs to list all possible answers. Still using DP to solve.
Runtime: 36 ms, faster than 66.70% of Python online submissions for Word Break II.
Memory Usage: 12 MB, less than 100.00% of Python online submissions for Word Break II.
```python
def wordBreak(s, wordDict):
    if not s: return []
    ws,dp,map,ans=set(wordDict),[-1]*(len(s)+1),defaultdict(list),[]
    dp[0]=0
    for r in range(len(s)+1):
        for l in range(r+1):
            if s[l:r] in ws and dp[l]>-1:
                dp[r]=l+1
                map[l].append(s[l:r])
    if dp[-1]==-1: return []
    print(dp)
    def func(s,i=0,cur=[]):
        if i==len(s):
            ans.append(cur[:])
            return
        for c in map[i]:
            cur.append(c)
            func(s,i+len(c),cur)
            cur.pop()
    func(s)
    return ans
```