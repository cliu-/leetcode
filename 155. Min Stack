155. Min Stack
Easy

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


Runtime: 56 ms, faster than 63.87% of Python online submissions for Min Stack.
Memory Usage: 15.5 MB, less than 91.11% of Python online submissions for Min Stack.
```python
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack=[]
        self._min=2**32
        

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        if x<=self._min:
            self.stack.append(self._min)
            self._min=x
        self.stack.append(x)
        

    def pop(self):
        """
        :rtype: None
        """
        p=self.stack.pop()
        if p==self._min:
            self._min=self.stack.pop()
        return p
        

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]
        

    def getMin(self):
        """
        :rtype: int
        """
        return self._min
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
```