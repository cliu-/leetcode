## 17\. Letter Combinations of a Phone Number
_Medium_

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

![alt](200px-Telephone-keypad2.svg.png)

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.

```python
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """ 
```

1st answer. Accepted, runtime 20ms, memory usage 11.8MB.
```python
from collections import deque
def letterCombinations(digits):
    if not digits: return []
    map={'2':['a','b','c'],'3':['d','e','f'],'4':['g','h','i'],'5':['j','k','l'],'6':['m','n','o'],'7':['p','q','r','s'],'8':['t','u','v'],'9':['w','x','y','z']}
    q=deque(map[digits[0]])
    for n in digits[1:]:
        arr,l=map[n],len(q)
        for i in xrange(l):
            s=q.popleft()
            for c in arr:
                q.append(s+c)
    return q
```

Think about the map declared in the 1st answer, the value type is a list, if I just use str type for the value, it would be faster?
2nd answer, runtime 12ms, memory usage 12MB.
```python
from collections import deque
def letterCombinations(digits):
    if not digits: return []
    map={'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}
    q=deque(map[digits[0]])
    for n in digits[1:]:
        arr,l=map[n],len(q)
        for i in xrange(l):
            s=q.popleft()
            for c in arr:
                q.append(s+c)
    return q
```