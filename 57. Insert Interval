57. Insert Interval
Hard

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
```
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
```

Example 2:
```
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
```

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

```python
class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[List[int]]
        :type newInterval: List[int]
        :rtype: List[List[int]]
        """
```

1st answer. Runtime: 60 ms, faster than 79.02% of Python online submissions for Insert Interval. Memory Usage: 15.3 MB, less than 20.00% of Python online submissions for Insert Interval.
```python
def insert(intervals, newInterval):
    if not intervals: return [newInterval]
    if not newInterval: return intervals
    def bs(arr,i,t):
        l,r=0,len(arr)-1
        while l<=r:
            m=l+((r-l)//2)
            if arr[m][i]<t:
                l=m+1
            elif arr[m][i]>t:
                r=m-1
            else: return m
        return l
    l=bs(intervals,0,newInterval[0])
    r=bs(intervals,1,newInterval[1])
    if l==0: 
        ans0,lv=[],newInterval[0]
    elif newInterval[0]>intervals[l-1][1]:
        ans0,lv=intervals[:l],newInterval[0]
    else:
        ans0,lv=intervals[:l-1],intervals[l-1][0]
    if r==len(intervals):
        ans1,rv=[],newInterval[1]
    elif intervals[r][0]<=newInterval[1]<=intervals[r][1]:
        ans1,rv=intervals[r+1:],intervals[r][1]
    else:
        ans1,rv=intervals[r:],newInterval[1]
    return ans0+[[lv,rv]]+ans1

[[1,2],[3,6],[9,12],[15,16]]
[4,8]

[]
[5,7]