160. Intersection of Two Linked Lists
Easy

Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:

![alt](160_example.png)

begin to intersect at node c1.

 

Example 1:

![alt](160_example_1.png)

Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
 

Example 2:

![alt](160_example_2.png)

Input: intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
 

Example 3:

![alt](160_example_3.png)

Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: null
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.


```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
```

Runtime: 228 ms, faster than 7.28% of Python online submissions for Intersection of Two Linked Lists.
Memory Usage: 42.1 MB, less than 8.00% of Python online submissions for Intersection of Two Linked Lists.
```python
def getIntersectionNode(headA, headB):
    ss = set()
    p=headA
    while p:
        ss.add(p)
        p = p.next
    p=headB
    while p:
        if p in ss:
            return p
        p = p.next
    return None
```


Two points solution.
Runtime: 216 ms, faster than 12.02% of Python online submissions for Intersection of Two Linked Lists.
Memory Usage: 41.9 MB, less than 16.00% of Python online submissions for Intersection of Two Linked Lists.
```python
def getIntersectionNode(headA, headB):
    p1,p2,f1,f2=headA,headB,False,False
    while p1 or p2:
        if p1!=None and p1==p2:
            return p1
        if p1: p1=p1.next
        if p2: p2=p2.next
        if p1==None and not f1: p1,f1=headB,True
        if p2==None and not f2: p2,f2=headA,True
    return None
```

Runtime: 184 ms, faster than 93.13% of Python online submissions for Intersection of Two Linked Lists.
Memory Usage: 41.9 MB, less than 16.00% of Python online submissions for Intersection of Two Linked Lists.
```python
def getIntersectionNode(headA, headB):
    p1,p2=headA,headB
    if not p1 or not p2: return None
    while p1 is not p2:
        p1 = p1.next if p1 else p1=headB
        p2 = p2.next if p2 else p2=headA
    return p1
```