105. Construct Binary Tree from Preorder and Inorder Traversal
Medium

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
```

Wrong answer, failed at case `buildTree([3,2,1,4,5],[1,2,3,4,5])`.
```python
def buildTree(preorder, inorder):
    def func(pre_i, in_arr):
        if not in_arr: return None
        if len(in_arr)==1: return TreeNode(in_arr[0])
        v,j=preorder[pre_i[0]],0
        while j<len(in_arr) and in_arr[j]!=v:
            j+=1
        pre_i[0]+=1
        l=func(pre_i,in_arr[:j])
        pre_i[0]=pre_i[0]+(1 if l else 0)
        r=func(pre_i,in_arr[j+1:])
        node=TreeNode(v)
        node.left,node.right=l,r
        return node
    return func([0],inorder)
```

Runtime: 448 ms, faster than 6.52% of Python online submissions for Construct Binary Tree from Preorder and Inorder Traversal. Memory Usage: 51.3 MB, less than 33.33% of Python online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
```
def buildTree(preorder, inorder):
    def func(preorder, inorder):
        if not inorder: return None
        v,j=preorder.pop(),0
        while j<len(inorder) and inorder[j]!=v:
            j+=1
        l=func(preorder,inorder[:j])
        r=func(preorder,inorder[j+1:])
        node=TreeNode(v)
        node.left,node.right=l,r
        return node
    return func(preorder[::-1],inorder)
```

Optimizing, last answer is slow, because the `while` loop in the recursion for seeking the value in `inorder` array.
I can use a map to optimize it.
Runtime: 44 ms, faster than 87.84% of Python online submissions for Construct Binary Tree from Preorder and Inorder Traversal. Memory Usage: 16.5 MB, less than 69.70% of Python online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
```python
def buildTree(preorder, inorder):
    map={v:i for i,v in enumerate(inorder)}
    def func(pre,inl,inr):
        if inl==inr: return None
        node=TreeNode(pre.pop())
        j=map[node.val]
        node.left=func(pre,inl,j)
        node.right=func(pre,j+1,inr)
        return node
    return func(preorder[::-1],0,len(inorder))
```

[1,2,3]
[1,2,3]
[1,null,2,null,3]

[3,9,20,15,7]
[9,3,15,20,7]
[3,9,20,null,null,15,7]

[3,2,1,4,5]
[1,2,3,4,5]
[3,2,4,1,null,null,5]