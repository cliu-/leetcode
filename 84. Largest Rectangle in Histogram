84. Largest Rectangle in Histogram
Hard

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

![Alt text](histogram.png)
Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

![Alt text](histogram_area.png)
The largest rectangle is shown in the shaded area, which has area = 10 unit.

```python
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
```

1st answer, the key of this problem is :
1. For any bar i the maximum rectangle is of width `r - l - 1`, where `r` is the last coordinate of the bar to the right with height `h[r] >= h[i]`, and `l` is the last coordinate of the bar to the left which height `h[l] >= h[i]`.
```python
def largestRectangleArea(heights):
    if not heights: return 0
    if len(heights)==1: return heights[0]
    from_left,from_right=[-1]*len(heights),[len(heights)]*len(heights)
    for i in range(1,len(heights)):
        p=i-1
        while p>-1 and heights[p]>=heights[i]:
            p=from_left[p]
        from_left[i]=p
    for i in range(len(heights)-2,-1,-1):
        p=i+1
        while p<len(heights) and heights[p]>=heights[i]:
            p=from_right[p]
        from_right[i]=p
    ans=0
    for i in range(len(heights)):
        ans=max(ans,(from_right[i]-from_left[i]-1)*heights[i])
    return ans
```

2nd answer, using stack. The key is "For any bar i the maximum rectangle is of width `r - l - 1`".
The stack is storing the index of elements, and initialize the stack with `-1`.
Runtime: 88 ms, faster than 78.94% of Python online submissions for Largest Rectangle in Histogram. Memory Usage: 13.6 MB, less than 63.64% of Python online submissions for Largest Rectangle in Histogram.
```python
def largestRectangleArea(heights):
    if not heights: return 0
    if len(heights)==1: return heights[0]
    stack,ans=[-1],0
    for i in range(len(heights)):
        while stack[-1]!=-1 and heights[stack[-1]]>=heights[i]:
            ans=max(ans,heights[stack.pop()]*(i-stack[-1]-1))
        stack.append(i)
    while stack[-1]!=-1:
        ans=max(ans,heights[stack.pop()]*(len(heights)-stack[-1]-1))
    return ans
```

assert(largestRectangleArea([3,2,3,5,6,3,2,3])==16)
assert(largestRectangleArea([2,1,5,6,2,3])==10)
assert(largestRectangleArea([4,2,0,3,2,5]) == 6)
assert(largestRectangleArea([4,6,0,3,2,5])==8)
assert(largestRectangleArea([3,6,5,7,4,8,1,0])==20)