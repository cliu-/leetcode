114. Flatten Binary Tree to Linked List
Medium

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
```  

Runtime: 20 ms, faster than 83.40% of Python online submissions for Flatten Binary Tree to Linked List. Memory Usage: 12.1 MB, less than 72.00% of Python online submissions for Flatten Binary Tree to Linked List.
```python
def flatten(root):
    def func(n):
        if not n: return ()
        l=func(n.left)
        r=func(n.right)
        if not l and not r: return (n,n)
        if not r: 
            n.right,n.left=l[0],None
            return (n,l[1])
        if not l:
            return (n,r[1])
        n.right=l[0]
        l[1].right=r[0]
        n.left=None
        return (n,r[1])
    return func(root)[0]
```


[1,2,5,3,4,null,6]

[1,2]