216. Combination Sum III
Medium

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]


```python
class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
```

Runtime: 16 ms, faster than 83.18% of Python online submissions for Combination Sum III.
Memory Usage: 11.8 MB, less than 50.00% of Python online submissions for Combination Sum III.
```python
def combinationSum3(k, n):
    if k<1 or n<1 or n>45: return []
    if k==1 and n>9: return []
    res=[]
    def func(k,n,i,cur=[]):
        # print('k={},n={},i={},cur={}'.format(k,n,i,cur))
        if k==0:
            if n==0:
                res.append(cur[:])
            return
        for j in range(i,10):
            cur.append(j)
            func(k-1,n-j,j+1,cur)
            cur.pop()
    func(k,n,1)
    return res
```