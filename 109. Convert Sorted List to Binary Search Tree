109. Convert Sorted List to Binary Search Tree
Medium

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5


```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
 ```

I said, every linked-list problem could be convert to array list(space complexity is O(N)) to be solved.
Runtime: 112 ms, faster than 83.84% of Python online submissions for Convert Sorted List to Binary Search Tree. Memory Usage: 24 MB, less than 44.44% of Python online submissions for Convert Sorted List to Binary Search Tree.
```python
def sortedListToBST(head):
    arr=[]
    while head:
        arr.append(head.val)
        head=head.next
    def func(nums):
        if not nums: return None
        i=len(nums)//2
        n=TreeNode(nums[i])
        n.left=func(nums[:i])
        n.right=func(nums[i+1:])
        return n
    return func(arr)
```

If the following question is, could you use constant space to solve this problem?
Runtime: 116 ms, faster than 68.29% of Python online submissions for Convert Sorted List to Binary Search Tree.
Memory Usage: 23.9 MB, less than 44.44% of Python online submissions for Convert Sorted List to Binary Search Tree.
```python
def sortedListToBST(head):
    ll,p=0,[head]
    while head: ll,head=ll+1,head.next
    def func(l,r):
        if l>r: return None
        m=(l+r)//2
        left=func(l,m-1)
        node=TreeNode(p[0].val)
        p[0]=p[0].next
        right=func(m+1,r)
        node.left,node.right=left,right
        return node
    return func(0,ll-1)
```