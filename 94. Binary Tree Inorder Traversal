94. Binary Tree Inorder Traversal
Medium

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
```        

1st answer, solve with recursion.
```python
def inorderTraversal(root):
    ans=[]
    def func(node):
        if not node: return
        if node.left: func(node.left)
        ans.append(node.val)
        if node.right: func(node.right)
    func(root)
    return ans
```

2nd answer, solve with iteration.
Runtime: 16 ms, faster than 73.22% of Python online submissions for Binary Tree Inorder Traversal.
Memory Usage: 11.8 MB, less than 57.50% of Python online submissions for Binary Tree Inorder Traversal.
```python
def inorderTraversal(root):
    if not root: return []
    ans,stack,p=[],[],root
    while p or stack:
        while p:
            stack.append(p)
            p=p.left
        p=stack.pop()
        ans.append(p.val)
        p=p.right
    return ans
```

[1,2,3,4,5,null,6]

[1,null,2,3]
