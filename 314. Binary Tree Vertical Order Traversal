314. Binary Tree Vertical Order Traversal
Medium

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]
Examples 2:

Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
Examples 3:

Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]



```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def verticalOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
```


Wrong answer, failed at `[3,9,8,4,0,1,7,null,null,null,2,5]`.
The output is `[[4],[9,5],[3,0,1],[2,8],[7]]`, the expected output is `[[4],[9,5],[3,0,1],[8,2],[7]]`.
```python
from collections import defaultdict
def verticalOrder(root):
    if not root: return []
    map=defaultdict(list)
    def func(node,i):
        if not node: return
        map[i].append(node.val)
        func(node.left,i-1)
        func(node.right,i+1)
    func(root,0)
    keys=sorted(map.keys())
    ans=[]
    for k in keys:
        ans.append(map[k])
    return ans
```


Runtime: 16 ms, faster than 90.43% of Python online submissions for Binary Tree Vertical Order Traversal.
Memory Usage: 11.8 MB, less than 75.00% of Python online submissions for Binary Tree Vertical Order Traversal.
```python
from collections import defaultdict,deque
def verticalOrder(root):
    if not root: return []
    map=defaultdict(list)
    q=deque([(root,0)])
    while q:
        m=len(q)
        for _ in xrange(m):
            node,vi=q.popleft()
            map[vi].append(node.val)
            if node.left:
                q.append((node.left,vi-1))
            if node.right:
                q.append((node.right,vi+1))
    keys=sorted(map.keys())
    ans=[]
    for k in keys:
        ans.append(map[k])
    return ans
```