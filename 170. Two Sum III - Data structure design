170. Two Sum III - Data structure design
Easy

Design and implement a TwoSum class. It should support the following operations: add and find.

add - Add the number to an internal data structure.
find - Find if there exists any pair of numbers which sum is equal to the value.

Example 1:

add(1); add(3); add(5);
find(4) -> true
find(7) -> false
Example 2:

add(3); add(1); add(2);
find(3) -> true
find(6) -> false


Runtime: 412 ms, faster than 44.17% of Python3 online submissions for Two Sum III - Data structure design.
Memory Usage: 23.9 MB, less than 25.00% of Python3 online submissions for Two Sum III - Data structure design.
```python
from collections import defaultdict
class TwoSum:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.arr=[]
        self.map=defaultdict(set)
        

    def add(self, number: int) -> None:
        """
        Add the number to an internal data structure..
        """
        self.arr.append(number)
        self.map[number].add(len(self.arr)-1)
        

    def find(self, value: int) -> bool:
        """
        Find if there exists any pair of numbers which sum is equal to the value.
        """
        if not self.arr: return False
        for i,n in enumerate(self.arr):
            if value-n in self.map:
                if i not in self.map[value-n] or len(self.map[value-n])>1:
                    return True
        return False
        


# Your TwoSum object will be instantiated and called as such:
# obj = TwoSum()
# obj.add(number)
# param_2 = obj.find(value)
```