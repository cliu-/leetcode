241. Different Ways to Add Parentheses
Medium

Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10


```python
class Solution(object):
    def diffWaysToCompute(self, input):
        """
        :type input: str
        :rtype: List[int]
        """

```

before adding cache. Runtime: 24 ms, faster than 68.49% of Python online submissions for Different Ways to Add Parentheses. Memory Usage: 11.8 MB, less than 87.50% of Python online submissions for Different Ways to Add Parentheses.
after adding cache. Runtime: 12 ms, faster than 99.39% of Python online submissions for Different Ways to Add Parentheses. Memory Usage: 11.9 MB, less than 37.50% of Python online submissions for Different Ways to Add Parentheses.
```python
def diffWaysToCompute(input):
    memo={}
    def func(s):
        if not s: return []
        if s in memo: return memo[s]
        res=[]
        if s.isdigit(): 
            res=[int(s)]
        else:
            for i in range(len(s)):
                if s[i] in {'+','-','*'}:
                    n1,n2=func(s[:i]),func(s[i+1:])
                    if s[i]=='+': res+=[a+b for a in n1 for b in n2]
                    if s[i]=='-': res+=[a-b for a in n1 for b in n2]
                    if s[i]=='*': res+=[a*b for a in n1 for b in n2]
        memo[s]=res[:]
        return res
    return func(input)
```