239. Sliding Window Maximum
Hard

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

```
Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3

Output: [3,3,5,5,6,7] 

Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

```

Note:
- You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


```python
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
```


```python
def maxSlidingWindow(nums, k):
    from collections import deque
    import heapq
    if k==1: return nums
    if k==len(nums): return max(nums)
    i,h,q=0,[],deque()
    ans=[]
    while i<len(nums):
        e=[nums[i],i]
        if len(q)>=k:
            while h and h[-1][1]==-1: heapq.heappop(h)
            ans.append(h[-1][0])
            q.popleft()[1]=-1
        heapq.heappush(h,e)
        q.append(e)
        i+=1
    while h and h[-1][1]==-1: heapq.heappop(h)
    ans.append(h[-1][0])
    return ans
```