239. Sliding Window Maximum
Hard

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

```
Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3

Output: [3,3,5,5,6,7] 

Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

```

Note:
- You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?


```python
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
```

Use heap to solve the problem.
Tip: `heapq` in python could just do the `"ascent sorting"`, if we want to make a `heap` pop by descent, we can use the complement of the integers in original array for `heapq.push`.
Runtime: 172 ms, faster than 33.90% of Python online submissions for Sliding Window Maximum.
Memory Usage: 22.9 MB, less than 6.90% of Python online submissions for Sliding Window Maximum.
```python
def maxSlidingWindow(nums, k):
    from collections import deque
    import heapq
    if not nums: return []
    if k==1: return nums
    if k==len(nums): return [max(nums)]
    i,h,q=0,[],deque()
    ans=[]
    while i<len(nums):
        e=[-nums[i],i]
        if len(q)>=k:
            while h[0][1]==-1:
                heapq.heappop(h)
            ans.append(-h[0][0])
            q.popleft()[1]=-1
        heapq.heappush(h,e)
        q.append(e)
        # print('i={},nums[i]={},q={},h={}'.format(i,nums[i],q,h))
        i+=1
    while h[0][1]==-1:
        heapq.heappop(h)
    ans.append(-h[0][0])
    return ans
```


`deque` solution.
Runtime: 144 ms, faster than 62.85% of Python online submissions for Sliding Window Maximum.
Memory Usage: 18.8 MB, less than 79.31% of Python online submissions for Sliding Window Maximum.
```python
def maxSlidingWindow(nums, k):
    from collections import deque
    if not nums: return []
    if k==1: return nums
    if k==len(nums): return [max(nums)]
    q,ans=deque(),[]
    for i,n in enumerate(nums):
        if q and q[0]<=i-k:
            q.popleft()
        while q and nums[q[-1]]<n:
            q.pop()
        q.append(i)
        if i>=k-1:
            ans.append(nums[q[0]])
    return ans
```

DP solution
Runtime: 148 ms, faster than 52.79% of Python online submissions for Sliding Window Maximum.
Memory Usage: 18.8 MB, less than 62.07% of Python online submissions for Sliding Window Maximum.
```python
def maxSlidingWindow(nums, k):
    if not nums: return []
    if k==1: return nums
    if k==len(nums): return [max(nums)]
    left,right,m=[0]*len(nums),[0]*len(nums),-2**31
    for i in xrange(len(nums)):
        if i%k==0: m=-2**32
        m=max(nums[i],m)
        left[i]=m
    m=-2**31
    for i in xrange(len(nums)-1,-1,-1):
        m=max(nums[i],m)
        right[i]=m
        if i%k==0: m=-2**32
    res=[]
    for i in xrange(k-1,len(nums)):
        res.append(max(left[i],right[i+1-k]))
    return res
```