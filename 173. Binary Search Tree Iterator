173. Binary Search Tree Iterator
Medium

Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

 

Example:

![txt](bst-tree.png)

BSTIterator iterator = new BSTIterator(root);
iterator.next();    // return 3
iterator.next();    // return 7
iterator.hasNext(); // return true
iterator.next();    // return 9
iterator.hasNext(); // return true
iterator.next();    // return 15
iterator.hasNext(); // return true
iterator.next();    // return 20
iterator.hasNext(); // return false
 

Note:

next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.



Runtime: 80 ms, faster than 81.84% of Python3 online submissions for Binary Search Tree Iterator.
Memory Usage: 19.7 MB, less than 84.62% of Python3 online submissions for Binary Search Tree Iterator.
```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator:

    def __init__(self, root: TreeNode):
        self.p=root
        self.stack=[]
        

    def next(self) -> int:
        """
        @return the next smallest number
        """
        while self.p:
            self.stack.append(self.p)
            self.p=self.p.left
        self.p=self.stack.pop()
        ans=self.p.val
        self.p=self.p.right
        return ans

    def hasNext(self) -> bool:
        """
        @return whether we have a next smallest number
        """
        return self.p or self.stack
        

def inorder_traversal(root):
    p,stack=root,[]
    while p or stack:
        while p:
            stack.append(p)
            p=p.left
        p=stack.pop()
        visit(p)
        p=p.right


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
```