118. Pascal's Triangle
Easy

Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.

![atl](PascalTriangleAnimated2.gif)

In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

```python
class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
```

Runtime: 12 ms, faster than 93.13% of Python online submissions for Pascal's Triangle. Memory Usage: 11.7 MB, less than 83.33% of Python online submissions for Pascal's Triangle.
```python
def generate(numRows):
    if numRows==0: return []
    ans=[[1]]
    for i in range(1,numRows):
        pre,arr=[0]+ans[i-1]+[0],[0]*(i+1)
        for j in range(1,len(pre)):
            arr[j-1]=pre[j]+pre[j-1]
        ans.append(arr)
    return ans
```