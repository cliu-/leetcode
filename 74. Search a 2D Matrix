74. Search a 2D Matrix
Medium

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
```
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
```

Example 2:
```
Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false
```

```python
class Solution(object):
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
```

1st answer, use language feature to solve. Runtime: 44 ms, faster than 95.44% of Python online submissions for Search a 2D Matrix. Memory Usage: 13.7 MB, less than 16.67% of Python online submissions for Search a 2D Matrix.
```python
def searchMatrix(matrix, target):
    arr=[]
    for m in matrix:
        arr.extend(m)
    l,r=0,len(arr)-1
    while l<=r:
        m=l+(r-l)//2
        if target>arr[m]: l=m+1
        elif target<arr[m]: r=m-1
        else: return True
    return False
```

2nd answer, apply binary search on a 2D array. Runtime: 48 ms, faster than 83.69% of Python online submissions for Search a 2D Matrix. Memory Usage: 13.6 MB, less than 38.09% of Python online submissions for Search a 2D Matrix.
```python
def searchMatrix(matrix, target):
    l,r=0,len(matrix)*len(matrix[0])-1
    while l<=r:
        m=l+(r-l)//2
        x,y=divmod(m,len(matrix[0]))
        if target>matrix[x][y]: l=m+1
        elif target<matrix[x][y]: r=m-1
        else: return True
    return False
```


[[1,3,5,7],[10,11,16,20],[23,30,34,50]]
3

[[1,3,5,7],[10,11,16,20],[23,30,34,50]]
13