161. One Edit Distance
Medium

Given two strings s and t, determine if they are both one edit distance apart.

Note: 

There are 3 possiblities to satisify one edit distance apart:

Insert a character into s to get t
Delete a character from s to get t
Replace a character of s to get t

Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.

Example 2:

Input: s = "cab", t = "ad"
Output: false
Explanation: We cannot get t from s by only one step.

Example 3:

Input: s = "1203", t = "1213"
Output: true
Explanation: We can replace '0' with '1' to get t.

```python
class Solution(object):
    def isOneEditDistance(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
```


Runtime: 24 ms, faster than 31.78% of Python online submissions for One Edit Distance.
Memory Usage: 12.1 MB, less than 11.76% of Python online submissions for One Edit Distance.
```python
def isOneEditDistance(s, t):
    i=0
    while i<len(s) and i<len(t):
        if s[i]!=t[i]: break
        i+=1
    if i+1<=len(t) and s[i:]==t[i+1:]: return True
    if i+1<=len(s) and s[i+1:]==t[i:]: return True
    if i+1<=len(s) and i+1<=len(t) and s[i+1:]==t[i+1:]: return True
    return False
```