111. Minimum Depth of Binary Tree
Easy

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
```

Runtime: 40 ms, faster than 21.56% of Python online submissions for Minimum Depth of Binary Tree. Memory Usage: 15 MB, less than 12.82% of Python online submissions for Minimum Depth of Binary Tree.
```python
def minDepth(root):
    def func(n):
        if not n: return 0
        l=func(n.left)
        r=func(n.right)
        if l==0 or r==0: return 1+l+r
        return 1+min(l,r)
    return func(root)
```

[1,2] == 2