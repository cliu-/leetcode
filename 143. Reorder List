143. Reorder List
Medium

Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: None Do not return anything, modify head in-place instead.
        """
```

O(N) space.
Runtime: 92 ms, faster than 32.82% of Python online submissions for Reorder List.
Memory Usage: 29.8 MB, less than 11.11% of Python online submissions for Reorder List.
```python
def reorderList(head):
    arr=[]
    while head:
        arr.append(head)
        head=head.next
    l,r=0,len(arr)-1
    while l<r:
        p1,p2=arr[l],arr[r]
        p2.next,p1.next=p1.next,p2
        l,r=l+1,r-1
    arr[r].next=None
    return arr[0]
```

O(1) space solution.
```python
def reorderList(head):
    ## find mid node.
    p1=p2=head
    while p2 and p2.next:
        p2=p2.next.next
        p1=p1.next
    ## reverse the list from p1.
    l=p1.next
    while
```