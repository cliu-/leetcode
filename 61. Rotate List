61. Rotate List
Medium

Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL

```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
```

1st solution. Runtime: 28 ms, faster than 30.38% of Python online submissions for Rotate List.
Memory Usage: 11.9 MB, less than 33.33% of Python online submissions for Rotate List.
The time complexity is O(n), space complexity is O(n).
```python
def rotateRight(head, k):
    if not head or not head.next or k==0: return head
    p,arr=head,[]
    while p:
        arr.append(p)
        p=p.next
    k=k%len(arr)
    if k==0: return head
    arr[-k-1].next=None
    arr[-1].next=arr[0]
    return arr[-k]
```

Two pointers solution. Same time complexity, but space complexity is O(1).
```python
def rotateRight(head, k):
    if not head or not head.next or k==0: return head
    p1,p2,l=head,head,1
    while p2.next: p2,l=p2.next,l+1
    k=k%l
    if k==0: return head
    p2.next,m=p1,l-k
    while m>0: p1,p2,m=p1.next,p2.next,m-1
    p2.next=None
    return p1

```
