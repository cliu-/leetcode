34. Find First and Last Position of Element in Sorted Array
Medium

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:
```
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
```
Example 2:
```
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
```

```python
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """

```

1st answer, Runtime: 76 ms, faster than 24.59%. Memory Usage: 13.2 MB, less than 17.65%.
To optimize more, I can add one condition at the begining.
`if target<nums[0] or target>nums[-1]: return [-1,-1]`
```python
def searchRange(nums, target):
    if not nums: return [-1,-1]
    if len(nums)==1: return [0,0] if nums[0]==target else [-1,-1]
    l,r=0,len(nums)-1
    while l<=r:
        m=l+(r-l)//2
        if nums[m]<=target: l=m+1
        else: r=m-1
    if nums[l-1]!=target: return [-1,-1]
    aa=l-1
    l,r=0,aa
    while l<=r:
        m=l+(r-l)//2
        if nums[m]>=target: r=m-1
        else: l=m+1
    return [l-1,aa]
```