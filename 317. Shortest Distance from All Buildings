317. Shortest Distance from All Buildings
Hard

You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
Example:

Input: [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 7 

Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2),
             the point (1,2) is an ideal empty land to build a house, as the total 
             travel distance of 3+3+1=7 is minimal. So return 7.
Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.


```python
class Solution(object):
    def shortestDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
```


Runtime: 836 ms, faster than 37.37% of Python online submissions for Shortest Distance from All Buildings.
Memory Usage: 12.7 MB, less than 50.00% of Python online submissions for Shortest Distance from All Buildings.
```python
from collections import deque,defaultdict
def shortestDistance(grid):
    if not grid: return -1
    m,n=len(grid),len(grid[0])
    buildings=[]
    for i in xrange(m):
        for j in xrange(n):
            if grid[i][j]==1:
                buildings.append((i,j))
    map=defaultdict(list)
    def update():
        for i in xrange(len(grid)):
            for j in xrange(len(grid[0])):
                if grid[i][j]<0:
                    map[(i,j)].append(-grid[i][j])
                    grid[i][j]=0
    nb=[(-1,0),(1,0),(0,-1),(0,1)]
    for bi,bj in buildings:
        q=deque([(bi,bj)])
        seen=set()
        while q:
            i,j=q.popleft()
            val=grid[i][j]
            for offi,offj in nb:
                ii,jj=i+offi,j+offj
                if (ii,jj) in seen or ii<0 or jj<0 or ii>=m or jj>=n or grid[ii][jj]>0:
                    continue
                grid[ii][jj]+=(-1 if val==1 else val-1)
                q.append((ii,jj))
                seen.add((ii,jj))
        update()
    if not map: return -1
    ans=-1
    for arr in map.values():
        if len(arr)!=len(buildings):
            continue
        s=sum(arr)
        if ans==-1 or s<ans: ans=s
    return ans
```


[[1,1,1,1,1,0],[0,0,0,0,0,1],[0,1,1,0,0,1],[1,0,0,1,0,1],[1,0,1,0,0,1],[1,0,0,0,0,1],[0,1,1,1,1,0]]


[
[1,1,1,1,1,0],
[0,0,0,0,0,1],
[0,1,1,0,0,1],
[1,0,0,1,0,1],
[1,0,1,0,0,1],
[1,0,0,0,0,1],
[0,1,1,1,1,0]
]

[
[1, 1, 1, 1, 1, 0], 
[-1, -2, -3, -4, -5, 1], 
[-2, 1, 1, -5, -6, 1], 
[1, -14, -15, 1, -7, 1], 
[1, -13, 1, -9, -8, 1], 
[1, -12, -11, -10, -9, 1], 
[0, 1, 1, 1, 1, 0]
]

[[1, 1, 1, 1, 1, 0], [-2, -1, -2, -3, -4, 1], [-3, 1, 1, -4, -5, 1], [1, -13, -14, 1, -6, 1], [1, -12, 1, -8, -7, 1], [1, -11, -10, -9, -8, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-3, -2, -1, -2, -3, 1], [-4, 1, 1, -3, -4, 1], [1, -12, -13, 1, -5, 1], [1, -11, 1, -7, -6, 1], [1, -10, -9, -8, -7, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-4, -3, -2, -1, -2, 1], [-5, 1, 1, -2, -3, 1], [1, -11, -12, 1, -4, 1], [1, -10, 1, -6, -5, 1], [1, -9, -8, -7, -6, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, -1], [-5, -4, -3, -2, -1, 1], [-6, 1, 1, -3, -2, 1], [1, -10, -11, 1, -3, 1], [1, -9, 1, -5, -4, 1], [1, -8, -7, -6, -5, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, -1], [-5, -4, -3, -2, -1, 1], [-6, 1, 1, -3, -2, 1], [1, -10, -11, 1, -3, 1], [1, -9, 1, -5, -4, 1], [1, -8, -7, -6, -5, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-2, -1, -12, -11, -10, 1], [-1, 1, 1, -10, -9, 1], [1, -1, -2, 1, -8, 1], [1, -2, 1, -6, -7, 1], [1, -3, -4, -5, -6, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-3, -2, -1, -2, -3, 1], [-4, 1, 1, -1, -2, 1], [1, -10, -1, 1, -3, 1], [1, -9, 1, -5, -4, 1], [1, -8, -7, -6, -5, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-6, -5, -4, -3, -2, 1], [-7, 1, 1, -2, -1, 1], [1, -9, -10, 1, -2, 1], [1, -8, 1, -4, -3, 1], [1, -7, -6, -5, -4, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-14, -13, -12, -11, -10, 1], [-1, 1, 1, -10, -9, 1], [1, -1, -2, 1, -8, 1], [1, -2, 1, -6, -7, 1], [1, -3, -4, -5, -6, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-7, -6, -5, -4, -3, 1], [-8, 1, 1, -1, -2, 1], [1, -8, -1, 1, -1, 1], [1, -7, 1, -1, -2, 1], [1, -6, -5, -4, -3, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-7, -6, -5, -4, -3, 1], [-8, 1, 1, -3, -2, 1], [1, -8, -9, 1, -1, 1], [1, -7, 1, -3, -2, 1], [1, -6, -5, -4, -3, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-13, -12, -11, -10, -9, 1], [-14, 1, 1, -9, -8, 1], [1, -2, -3, 1, -7, 1], [1, -1, 1, -5, -6, 1], [1, -2, -3, -4, -5, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-9, -8, -7, -6, -5, 1], [-10, 1, 1, -5, -4, 1], [1, -2, -1, 1, -3, 1], [1, -1, 1, -1, -2, 1], [1, -2, -1, -2, -3, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-8, -7, -6, -5, -4, 1], [-9, 1, 1, -4, -3, 1], [1, -7, -8, 1, -2, 1], [1, -6, 1, -2, -1, 1], [1, -5, -4, -3, -2, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-12, -11, -10, -9, -8, 1], [-13, 1, 1, -8, -7, 1], [1, -3, -4, 1, -6, 1], [1, -2, 1, -4, -5, 1], [1, -1, -2, -3, -4, 1], [-1, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-9, -8, -7, -6, -5, 1], [-10, 1, 1, -5, -4, 1], [1, -6, -7, 1, -3, 1], [1, -5, 1, -3, -2, 1], [1, -4, -3, -2, -1, 1], [0, 1, 1, 1, 1, -1]]
[[1, 1, 1, 1, 1, 0], [-12, -11, -10, -9, -8, 1], [-13, 1, 1, -8, -7, 1], [1, -3, -4, 1, -6, 1], [1, -2, 1, -4, -5, 1], [1, -1, -2, -3, -4, 1], [-1, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-11, -10, -9, -8, -7, 1], [-12, 1, 1, -7, -6, 1], [1, -4, -5, 1, -5, 1], [1, -3, 1, -3, -4, 1], [1, -2, -1, -2, -3, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-10, -9, -8, -7, -6, 1], [-11, 1, 1, -6, -5, 1], [1, -5, -6, 1, -4, 1], [1, -4, 1, -2, -3, 1], [1, -3, -2, -1, -2, 1], [0, 1, 1, 1, 1, 0]]
[[1, 1, 1, 1, 1, 0], [-9, -8, -7, -6, -5, 1], [-10, 1, 1, -5, -4, 1], [1, -6, -7, 1, -3, 1], [1, -5, 1, -3, -2, 1], [1, -4, -3, -2, -1, 1], [0, 1, 1, 1, 1, -1]]