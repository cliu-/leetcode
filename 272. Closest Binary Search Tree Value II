272. Closest Binary Search Tree Value II
Hard

Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]

Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def closestKValues(self, root, target, k):
        """
        :type root: TreeNode
        :type target: float
        :type k: int
        :rtype: List[int]
        """
```

Runtime: 32 ms, faster than 94.12% of Python online submissions for Closest Binary Search Tree Value II.
Memory Usage: 16.3 MB, less than 50.00% of Python online submissions for Closest Binary Search Tree Value II.
```python
def closestKValues(root, target, k):
    if k==0 or not root: return []
    a=[]
    def func(n):
        if not n: return
        if n.left: func(n.left)
        a.append(n.val)
        if n.right: func(n.right)
    func(root)
    if k>=len(a): return a
    i=bisect_left(a,target)
    if i==len(a): return a[i-k:]
    if i==0: return a[:k]
    l=r=i
    while l-1>-1 and abs(a[l-1]-target)<abs(a[l]-target):
        l-=1
    while r-l+1<k:
        if l==0: r+=1
        elif r==len(a)-1: l-=1
        elif abs(a[l-1]-target)<=abs(a[r+1]-target):
            l-=1
        elif abs(a[r+1]-target)<abs(a[l-1]-target):
            r+=1
    return a[l:l+k]
```

[2,1]
2147483647.0
1