321. Create Maximum Number
Hard

Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits.

Note: You should try to optimize your time and space complexity.

Example 1:

Input:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
Output:
[9, 8, 6, 5, 3]
Example 2:

Input:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
Output:
[6, 7, 6, 0, 4]
Example 3:

Input:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
Output:
[9, 8, 9]


```python
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
```


def maxNumber(nums1, nums2, k):
    def maxArr(nums,k):
        if len(nums)<=k: return nums
        s=[]
        for i in range(len(nums)):
            while s and s[-1]<nums[i] and len(nums)-i>k-len(s):
                s.pop()
            if len(s)<k: s.append(nums[i])
        return s

    def greater(n1,i,n2,j):
        if j==len(n2): return True
        if i==len(n1): return False
        if n1[i]>n2[j]: return True
        if n2[j]>n1[i]: return False
        return greater(n1,i+1,n2,j+1)

    def merge(n1,n2,k):
        ans=[0]*k
        i=j=0
        for r in xrange(k):
            if greater(n1,i,n2,j):
                ans[r]=n1[i]
                i+=1
            else:
                ans[i]=n2[j]
                j+=1
        return ans
