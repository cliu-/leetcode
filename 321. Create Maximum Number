321. Create Maximum Number
Hard

Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits.

Note: You should try to optimize your time and space complexity.

Example 1:

Input:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
Output:
[9, 8, 6, 5, 3]
Example 2:

Input:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
Output:
[6, 7, 6, 0, 4]
Example 3:

Input:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
Output:
[9, 8, 9]


```python
class Solution(object):
    def maxNumber(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[int]
        """
```


The key of solving this problem is to narrow down the problem.
1. First simple problem, given one array of length n, create the maximum number of length k. The solution of this problem is function "max_arr".
2. Second problem, given two array of length m and n, create maximum number of length k = m + n. There is a tricky case in this problem, "nums1=[6, 7], nums2=[6,0,4], k=5". In this case, how do we pick the first maximum element from "nums1" and "nums2"? "nums1[0]==nums2[0]==6", so we need to compare the number behind index "0", until we find the greater number. The solution of this problem is function "merge" and "greater".
3. Now go back the original problem. How can we break the problem to #1 and #2? First, we divide the k digits required into two parts, i and k-i. We then find the maximum number of length i in one array and the maximum number of length k-i in the other array using the algorithm in section 1. Now we combine the two results in to one array using the algorithm in section 2. After that we compare the result with the result we have and keep the larger one as final answer.

https://web.archive.org/web/20160120093629/http://algobox.org/create-maximum-number/

Runtime: 900 ms, faster than 13.70% of Python online submissions for Create Maximum Number.
Memory Usage: 12 MB, less than 50.00% of Python online submissions for Create Maximum Number.
```python
def maxNumber(nums1, nums2, k):
    def max_arr(nums,k):
        if k==0: return []
        if len(nums)<=k: return nums
        s=[]
        for i in range(len(nums)):
            while s and s[-1]<nums[i] and len(nums)-i>k-len(s):
                s.pop()
            if len(s)<k: s.append(nums[i])
        return s

    def greater(n1,i,n2,j):
        if j==len(n2): return True
        if i==len(n1): return False
        if n1[i]>n2[j]: return True
        if n2[j]>n1[i]: return False
        return greater(n1,i+1,n2,j+1)


    # If using the iterative "greater" function, the runtime and space is 516ms.
    # Runtime: 516 ms, faster than 46.57% of Python online submissions for Create Maximum Number.
    # def greater(n1,i,n2,j):
    #     while i<len(n1) and j<len(n2) and n1[i]==n2[j]:
    #         i,j=i+1,j+1
    #     return (j==len(n2)) or (i<len(n1) and n1[i]>=n2[j])


    def merge(n1,n2,k):
        ans=[0]*k
        i=j=0
        for r in xrange(k):
            if greater(n1,i,n2,j):
                ans[r]=n1[i]
                i+=1
            else:
                ans[i]=n2[j]
                j+=1
        return ans


    ans=[]
    i=max(0,k-len(nums2))
    while i<=k and i<len(nums1):
        arr=merge(max_arr(nums1,i),max_arr(nums2,k-i),k)
        if not ans or greater(arr,0,ans,0):
            ans=arr
        i+=1
    return ans
```

[3,4,6,5]
[9,1,2,5,8,3]
5
[9,8,6,5,3]

[6, 7]
[6, 0, 4]
5
[6, 7, 6, 0, 4]


[3, 9]
[8, 9]
3
[9, 8, 9]