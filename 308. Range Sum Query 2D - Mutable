308. Range Sum Query 2D - Mutable
Hard

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

![txt](range_sum_query_2d.png)

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -> 10
Note:
The matrix is only modifiable by the update function.
You may assume the number of calls to update and sumRegion function is distributed evenly.
You may assume that row1 ≤ row2 and col1 ≤ col2.


Runtime: 108 ms, faster than 86.79% of Python online submissions for Range Sum Query 2D - Mutable.
Memory Usage: 14.3 MB, less than 25.00% of Python online submissions for Range Sum Query 2D - Mutable.
```python
class TreeNode(object):

    def __init__(self,i,j,v):
        self.i,self.j,self.v=i,j,v
        self.left,self.right=None,None
        self.parent=None


class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        if not matrix: return
        self.matrix=matrix
        m,n=len(matrix),len(matrix[0])
        self.b=[[0]*n for _ in xrange(m)]
        for i in xrange(m):
            for j in xrange(n):
                self.b[i][j]=self.matrix[i][j]+(self.b[i][j-1] if j>0 else 0)
        

    def update(self, row, col, val):
        """
        :type row: int
        :type col: int
        :type val: int
        :rtype: None
        """
        self.matrix[row][col]=val
        for j in xrange(col,len(self.b[row])):
            self.b[row][j]=self.matrix[row][j]+(self.b[row][j-1] if j>0 else 0)
        

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """ 
        r1,r2=0,0
        for i in xrange(row1,row2+1):
            r1+=self.b[i][col2]
        if col1>0:
            for i in xrange(row1,row2+1):
                r2+=self.b[i][col1-1]
        return r1-r2
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# obj.update(row,col,val)
# param_2 = obj.sumRegion(row1,col1,row2,col2)
```

["NumMatrix","update","update","update","sumRegion"]
[[[[2,4],[-3,5]]],[0,1,3],[1,1,-3],[0,1,1],[0,0,1,1]]