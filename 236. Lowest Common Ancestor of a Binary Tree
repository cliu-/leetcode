236. Lowest Common Ancestor of a Binary Tree
Medium

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

![txt](binarytree.png)
 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.



```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """

```


Runtime: 52 ms, faster than 98.81% of Python online submissions for Lowest Common Ancestor of a Binary Tree.
Memory Usage: 26.3 MB, less than 15.69% of Python online submissions for Lowest Common Ancestor of a Binary Tree.
```python
def lowestCommonAncestor(root, p, q):
    ss,res={p.val,q.val},[]
    def func(node):
        if len(res)==1: return True
        if not node: return False
        rl=func(node.left)
        rr=func(node.right)
        # print('node={},rl={},rr={}'.format(node.val,rl,rr))
        if rl and rr:
            res.append(node)
        elif node.val in ss:
            if (not rl)==rr:
                res.append(node)
            return True
        return rl or rr
    func(root)
    return res[0]
```