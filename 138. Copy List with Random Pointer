138. Copy List with Random Pointer
Medium

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

 

Example 1:
![alttext](1470150906153-2yxeznm.png)

```
Input:
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

Explanation:
Node 1's value is 1, both of its next and random pointer points to Node 2.
Node 2's value is 2, its next pointer points to null and its random pointer points to itself.
```

Note:

You must return the copy of the given head as a reference to the cloned list.


```python
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
```

Runtime: 380 ms, faster than 85.19% of Python online submissions for Copy List with Random Pointer.
Memory Usage: 14.6 MB, less than 68.42% of Python online submissions for Copy List with Random Pointer.
```python
def copyRandomList(head):
    root,new_root=head,Node(head.val,None,None)
    map={root:new_root}
    while head.next:
        p=head.next
        new_p=Node(p.val,None,None)
        map[head].next=new_p
        map[p]=new_p
        head=p
    while root:
        if root.random:
            map[root].random=map[root.random]
        root=root.next
    return new_root
```


