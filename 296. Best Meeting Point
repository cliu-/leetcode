296. Best Meeting Point
Hard

A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.


```python
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
```

Wrong answer.
```python
def minTotalDistance(grid):
    if not grid: return 0
    m,n=len(grid),len(grid[0])
    arr1,arr2=[0]*n,[0]*m
    for i in xrange(m):
        for j in xrange(n):
            if grid[i][j]==1: 
                arr1[j],arr2[i]=arr1[j]+1,arr2[i]+1
    def func(arr):
        l,r,d=0,len(arr)-1,0
        while l<r:
            l,r=l+1,r-1
            while arr[l]==0: l+=1
            while arr[r]==0: r-=1
        for i in xrange(len(arr)):
            if arr[i]!=0:
                d+=arr[i]*abs(l-i)
        return d
    return func(arr1)+func(arr2)
```


Runtime: 52 ms, faster than 51.45% of Python online submissions for Best Meeting Point.
Memory Usage: 12.3 MB, less than 50.00% of Python online submissions for Best Meeting Point.
```python
def minTotalDistance(grid):
    if not grid: return 0
    m,n=len(grid),len(grid[0])
    arr1,arr2=[],[]
    for i in xrange(m):
        for j in xrange(n):
            if grid[i][j]==1:
                arr1.append(i)
                arr2.append(j)
    def func(arr):
        l,r,d=0,len(arr)-1,0
        while l<r:
            d+=(arr[r]-arr[l])
            l,r=l+1,r-1
        return d
    return func(arr1)+func(sorted(arr2))
```


Optimize the last solution, remove the `sorted` function calling.
So the runtime is O(m*n) and space is O(m*n)
Runtime: 48 ms, faster than 78.26% of Python online submissions for Best Meeting Point.
Memory Usage: 12.3 MB, less than 50.00% of Python online submissions for Best Meeting Point.
```python
def minTotalDistance(grid):
    if not grid: return 0
    m,n=len(grid),len(grid[0])
    arr1,arr2=[],[]
    for i in xrange(m):
        for j in xrange(n):
            if grid[i][j]==1:
                arr1.append(i)
    for i in xrange(n):
        for j in xrange(m):
            if grid[j][i]==1:
                arr2.append(i)
    def func(arr):
        l,r,d=0,len(arr)-1,0
        while l<r:
            d+=(arr[r]-arr[l])
            l,r=l+1,r-1
        return d
    return func(arr1)+func(arr2)
```

[[0,0,0,0,1,0,1,0],[0,0,0,0,1,0,0,1]]


[[0,1,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,0,0],[1,1,1,0,1,0,1,0,0],[0,0,1,0,0,0,0,1,0],[1,0,1,1,0,1,0,0,0]]

[
[0,1,0,0,0,0,0,0,0],
[0,1,0,0,0,1,0,0,0],
[1,1,1,0,1,0,1,0,0],
[0,0,1,0,0,0,0,1,0],
[1,0,1,1,0,1,0,0,0]
]