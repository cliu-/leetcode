265. Paint House II
Hard

There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[1,5,3],[2,9,4]]
Output: 5
Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. 

Follow up:
Could you solve it in O(nk) runtime?

```python
class Solution(object):
    def minCostII(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
```

Wrong answer, but the idea is right.
```python
def minCostII(costs):
    n1=n2=-1
    v1=v2=0
    for i,r in enumerate(costs):
        m1=m2=-1
        for j,c in enumerate(r):
            if m1==-1 or c<r[m1]: m1=j
        for j,c in enumerate(r):
            if j==m1: continue
            if m2==-1 or c<r[m2]: m2=j
        print("i={},m1={},m2={},n1={},n2={},v1={},v2={}".format(i,m1,m2,n1,n2,v1,v2))
        if i==0: 
            n1,n2,v1,v2=m1,m2,r[m1],r[m2]
        else:
            a1,a2,w1,w2=n1,n2,v1,v2
            if m1!=a1: n1,v1=m1,r[m1]+w1
            else: n1,v1=m1,r[m1]+w2
            if m2!=a1: n2,v2=m2,r[m2]+w1
            else: n2,v2=m2,r[m2]+w2
            if v1>v2: n1,n2,v1,v2=n2,n1,v2,v1
        print("n1={},n2={},v1={},v2={}".format(n1,n2,v1,v2))
    return v1
```


Runtime: 84 ms, faster than 89.30% of Python online submissions for Paint House II.
Memory Usage: 11.8 MB, less than 12.50% of Python online submissions for Paint House II.
```python
def minCostII(costs):
    n1=n2=-1
    for i,r in enumerate(costs):
        if i==0:
            for j,c in enumerate(r):
                if n1==-1 or c<r[n1]: n1=j
            for j,c in enumerate(r):
                if j==n1: continue
                if n2==-1 or c<r[n2]: n2=j
        else:
            m1=m2=-1
            for j,c in enumerate(r):
                if j==n1: 
                    r[j]=c+r[i-1][n2]
                else: 
                    r[j]=c+r[i-1][n1]
                if m1==-1 or r[j]<r[m1]: m1=j
            for j,c in enumerate(r):
                if j==m1: continue
                if m2==-1 or r[j]<r[m2]: m2=j
            n1,n2=m1,m2
    return costs[-1][n1]
```



[[11,20,4,3,19,3,18,17,6,8,18,18],[6,14,13,4,8,12,16,4,14,15,11,12],[8,1,4,20,19,9,12,11,13,12,1,3],[8,12,9,3,1,14,3,16,12,13,4,10],[17,1,1,5,17,10,20,15,3,9,18,3],[16,3,18,11,1,16,3,10,19,6,11,13]]
11

[[8,16,12,18,9],[19,18,8,2,8],[8,5,5,13,4],[15,9,3,19,2],[8,7,1,8,17],[8,2,8,15,5],[8,17,1,15,3],[8,8,5,5,16],[2,2,18,2,9]]
28


[[4,16],[15,5],[18,17],[10,12],[14,10],[3,10],[2,11],[18,14],[9,1],[14,13]]
101


[[14,18,16],[18,4,9],[2,20,2],[4,19,10],[7,13,4],[11,4,17],[10,11,20],[8,3,16],[4,17,15],[8,7,3],[1,19,4],[12,11,18],[10,5,6],[14,19,19],[5,8,12],[12,16,13],[20,8,16],[17,15,2],[14,2,20],[2,6,14],[3,17,17],[17,8,3],[16,8,4],[7,14,8],[13,3,7],[15,11,14],[19,20,10],[4,2,6]]
181
