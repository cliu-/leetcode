142. Linked List Cycle II
Medium

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:
```
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.
```

![alt](circularlinkedlist.png)

Example 2:
```
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.
```

![alt](circularlinkedlist_test2.png)

Example 3:
```
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.
```

![alt](circularlinkedlist_test3.png)


```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

```

Space complexity O(N).
Runtime: 40 ms, faster than 71.26% of Python online submissions for Linked List Cycle II.
Memory Usage: 18.7 MB, less than 16.98% of Python online submissions for Linked List Cycle II.
```python
def detectCycle(head):
    ss=set()
    while head:
        if head in ss:
            return head
        ss.add(head)
        head=head.next
    return None
```

Constant space. Algorithm name: `Floyd's Tortoise and Hare`.
The key point is, in the first phase, the two points must start from the same node(node0).
Runtime: 44 ms, faster than 46.20% of Python online submissions for Linked List Cycle II.
Memory Usage: 18.2 MB, less than 62.26% of Python online submissions for Linked List Cycle II.
```python
def detectCycle(head):
    if not head or not head.next: return None
    p1,p2=head,head
    while p1 and p2:
        if p2.next: p2=p2.next.next
        else: return None
        p1=p1.next
        if p1==p2: break
    if not p1 or not p2: return None
    p1=head
    while p1!=p2:
        p1,p2=p1.next,p2.next
    return p1
```