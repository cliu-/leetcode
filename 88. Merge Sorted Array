88. Merge Sorted Array
Easy

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

- The number of elements initialized in nums1 and nums2 are m and n respectively.

- You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

Example:
```
Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
```

```python
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
```

1st answer, Runtime: 28 ms, faster than 29.33% of Python online submissions for Merge Sorted Array.
Memory Usage: 11.7 MB, less than 58.97% of Python online submissions for Merge Sorted Array.
```python
def merge(nums1, m, nums2, n):
    i,p1,p2=m+n-1,m-1,n-1
    while p1>-1 or p2>-1:
        if p1<0:
            nums1[i],p2,i=nums2[p2],p2-1,i-1
        elif p2<0:
            nums1[i],p1,i=nums1[p1],p1-1,i-1
        elif nums1[p1]<nums2[p2]:
            nums1[i],p2,i=nums2[p2],p2-1,i-1
        elif nums1[p1]>=nums2[p2]:
            nums1[i],p1,i=nums1[p1],p1-1,i-1
        else: break
```   
merge([1,2,3,0,0,0],3,[2,5,6],3)==[1,2,2,3,5,6]
merge([0],0,[1],1) = [1]
