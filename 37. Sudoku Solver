37. Sudoku Solver
Hard

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

1. Each of the digits 1-9 must occur exactly once in each row.
2. Each of the digits 1-9 must occur exactly once in each column.
3. Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.

Empty cells are indicated by the character '.'.

![Alt text](250px-Sudoku-by-L2G-20050714.svg.png)

A sudoku puzzle...

![Alt text](250px-Sudoku-by-L2G-20050714_solution.svg.png)

...and its solution numbers marked in red.

Note:

- The given board contain only digits 1-9 and the character '.'.
- You may assume that the given Sudoku puzzle will have a single unique solution.
- The given board size is always 9x9.

```python
class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
```

1st answer, accepted.
There is a very difficult optimization approach for this problem, but I would not like to learn it.
```python
from collections import defaultdict
def solveSudoku(board):
    row,col,box=defaultdict(set),defaultdict(set),defaultdict(set)
    for i in range(9):
        for j in range(9):
            if board[i][j]!='.':
                row[i].add(board[i][j])
                col[j].add(board[i][j])
                box[(i//3)*3+(j//3)].add(board[i][j])
    def func(i,j):
        if i==0 and j==9: return True
        bi=(i//3)*3+(j//3)
        if i<8: newi,newj=i+1,j
        else: newi,newj=0,j+1
        if board[i][j]=='.':
            for n in range(1,10):
                ns=str(n)
                if ns not in row[i]|col[j]|box[bi]:
                    row[i].add(ns)
                    col[j].add(ns)
                    box[bi].add(ns)
                    board[i][j]=ns
                    if not func(newi,newj):
                        row[i].remove(ns)
                        col[j].remove(ns)
                        box[bi].remove(ns)
                        board[i][j]='.'
            if board[i][j]=='.':
                return False
        else:
            return func(newi,newj)
        return True
    func(0,0)

```

[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
