107. Binary Tree Level Order Traversal II
Easy

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
```
Runtime: 16 ms, faster than 94.28% of Python online submissions for Binary Tree Level Order Traversal II. Memory Usage: 12.2 MB, less than 69.57% of Python online submissions for Binary Tree Level Order Traversal II.
```python
from collections import deque
def levelOrderBottom(root):
    if not root: return []
    q,ans=deque([root]),deque([])
    while q:
        l,cur=len(q),[]
        for _ in range(l):
            e=q.popleft()
            cur.append(e.val)
            if e.left: q.append(e.left)
            if e.right: q.append(e.right)
        ans.appendleft(cur)
    return ans
```