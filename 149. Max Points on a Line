149. Max Points on a Line
Hard

Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

Example 1:

Input: [[1,1],[2,2],[3,3]]
Output: 3
Explanation:
^
|
|        o
|     o
|  o  
+------------->
0  1  2  3  4
Example 2:

Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
Explanation:
^
|
|  o
|     o        o
|        o
|  o        o
+------------------->
0  1  2  3  4  5  6
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

```python
class Solution(object):
    def maxPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
```

Solution 1, failed at case `[[0,0],[0,0]]`.
```python
from fractions import Fraction
from collections import defaultdict
def maxPoints(points):
    if len(points)==1: return 1
    map_h,map_v,map_s=defaultdict(set),defaultdict(set),defaultdict(set)
    res=0
    for i1 in xrange(len(points)):
        p1=points[i1]
        for i2 in xrange(i1+1,len(points)):
            p2=points[i2]
            if p1[0]==p2[0]:
                map_v[p1[0]].add((p1[0],p1[1]))
                map_v[p1[0]].add((p2[0],p2[1]))
                if len(map_v[p1[0]])>res: res=len(map_v[p1[0]])
            if p1[1]==p2[1]:
                map_h[p1[1]].add((p1[0],p1[1]))
                map_h[p1[1]].add((p2[0],p2[1]))
                if len(map_h[p1[1]])>res: res=len(map_h[p1[1]])
            if p1[0]!=p2[0] and p1[1]!=p2[1]:
                slope=Fraction(p2[1]-p1[1], p2[0]-p1[0])
                map_s[slope].add((p1[0],p1[1]))
                map_s[slope].add((p2[0],p2[1]))
                if len(map_s[slope])>res: res=len(map_s[slope])
    return res
```


Runtime: 988 ms, faster than 9.53% of Python online submissions for Max Points on a Line. Memory Usage: 11.9 MB, less than 100.00% of Python online submissions for Max Points on a Line.
Using Fraction object would cause the runtime slow, if changed to float, it should much faster. 
```python
from fractions import Fraction
def maxPoints(points):
    if len(points)<3: return len(points)
    res=1
    for i1 in xrange(len(points)-1):
        count,h_lines,duplicates,map_s=1,1,0,{}
        for i2 in xrange(i1+1,len(points)):
            p1,p2=points[i1],points[i2]
            if p1[0]==p2[0] and p1[1]==p2[1]:
                duplicates+=1
            elif p1[1]==p2[1]:
                h_lines+=1
                count=max(count, h_lines)
            else:
                slope=Fraction(p2[0]-p1[0], p2[1]-p1[1])
                map_s[slope]=map_s.get(slope,1)+1
                count=max(count, map_s[slope])
        count+=duplicates
        if count>res: res=count
    return res
```

[[0,-12],[5,2],[2,5],[0,-5],[1,5],[2,-2],[5,-4],[3,4],[-2,4],[-1,4],[0,-5],[0,-8],[-2,-1],[0,-11],[0,-9]]


defaultdict(<type 'set'>, {0: set([0, 3, 10, 11, 13, 14]), 1: set([4]), 2: set([2, 5]), 3: set([7]), 5: set([1, 6]), -1: set([9]), -2: set([8, 12])})

defaultdict(<type 'set'>, {2: set([1]), 4: set([8, 9, 7]), 5: set([2, 4]), -12: set([0]), -1: set([12]), -9: set([14]), -8: set([11]), -5: set([10, 3]), -4: set([6]), -2: set([5]), -11: set([13])})

defaultdict(<type 'set'>, {Fraction(17, 2): set([0, 2]), Fraction(-11, 2): set([0, 12]), Fraction(2, 1): set([1, 11, 4, 12]), Fraction(1, 3): set([8, 9, 2, 4]), Fraction(4, 1): set([11, 7]), Fraction(5, 1): set([0, 2, 3, 5, 7, 9, 10, 12, 13]), Fraction(1, 4): set([8, 2]), Fraction(7, 1): set([2, 14]), Fraction(8, 1): set([2, 13]), Fraction(10, 1): set([10, 3, 4]), Fraction(-1, 2): set([4, 7]), Fraction(14, 1): set([4, 14]), Fraction(16, 1): set([4, 13]), Fraction(17, 1): set([0, 4]), Fraction(3, 1): set([11, 10, 3, 5, 7]), Fraction(-7, 2): set([11, 12]), Fraction(3, 7): set([1, 12]), Fraction(8, 5): set([0, 6]), Fraction(-12, 1): set([9, 11]), Fraction(-3, 4): set([1, 4]), Fraction(-3, 7): set([12, 6]), Fraction(1, 1): set([12, 14, 6, 7]), Fraction(6, 1): set([5, 7]), Fraction(14, 5): set([0, 1]), Fraction(11, 5): set([1, 14]), Fraction(16, 3): set([0, 7]), Fraction(-4, 3): set([9, 6]), Fraction(1, 5): set([10, 3, 6]), Fraction(-13, 2): set([8, 14]), Fraction(-3, 2): set([8, 5]), Fract...