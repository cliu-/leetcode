106. Construct Binary Tree from Inorder and Postorder Traversal
Medium

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
```

1st answer.
Runtime: 40 ms, faster than 91.38% of Python online submissions for Construct Binary Tree from Inorder and Postorder Traversal. Memory Usage: 16.7 MB, less than 64.29% of Python online submissions for Construct Binary Tree from Inorder and Postorder Traversal.
```python
def buildTree(inorder, postorder):
    map={v:i for i,v in enumerate(inorder)}
    def func(post, inl, inr):
        if inl==inr: return None
        v=post.pop()
        j=map[v]
        node=TreeNode(v)
        node.right=func(post,j+1,inr)
        node.left=func(post,inl,j)
        return node
    return func(postorder,0,len(inorder))
```