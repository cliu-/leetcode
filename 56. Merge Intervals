56. Merge Intervals
Medium

Given a collection of intervals, merge all overlapping intervals.

Example 1:
```
Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
```

Example 2:
```
Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
```

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

```python
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
```

1st solution. Runtime: 76 ms, faster than 30.59% of Python online submissions for Merge Intervals. Memory Usage: 14.1 MB, less than 43.64% of Python online submissions for Merge Intervals.
```python
def merge(intervals):
    if not intervals or len(intervals)==1: return intervals
    arr=sorted(intervals)
    ans=[arr[0]]
    for i in range(1,len(arr)):
        p,c=ans.pop(),arr[i]
        if c[0]>p[1]: 
            ans=ans+[p,c]
        else:
            if c[1]>p[1]:
                ans.append([[p[0],c[1]])
            else:
                ans.append(p)
    return ans
```