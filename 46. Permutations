46. Permutations
Medium

Given a collection of distinct integers, return all possible permutations.

Example:
```
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
```

```python
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
```

1st solution, with `deque`. Runtime: 28 ms, faster than 62.17%. Memory Usage: 11.8 MB, less than 96.00%.
```python
from collections import deque
def permute(nums):
    if not nums: return []
    if len(nums)<2: return [nums]
    q=deque([[nums[0]]])
    for _ in range(1,len(nums)):
        ql,v=len(q),nums[_]
        for j in range(ql):
            e=q.popleft()
            el=len(e)
            for i in range(el+1):
                q.append(e[:i]+[v]+e[i:])
    return q

```