347. Top K Frequent Elements
Medium

Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 â‰¤ k â‰¤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.



```python
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
```

Runtime: 96 ms, faster than 53.75% of Python online submissions for Top K Frequent Elements.
Memory Usage: 15.4 MB, less than 24.39% of Python online submissions for Top K Frequent Elements.
```python
from collections import Counter
from heapq import heappop, heappush
def topKFrequent(nums, k):
    count=Counter(nums)
    h=[]
    for n,v in count.items():
        heappush(h,(-v,n))
    ans=[]
    while k>0:
        ans.append(heappop(h)[1])
        k-=1
    return ans
```