222. Count Complete Tree Nodes
Medium

Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
```


Recursive approach.
Runtime: 80 ms, faster than 64.78% of Python online submissions for Count Complete Tree Nodes.
Memory Usage: 27.8 MB, less than 5.88% of Python online submissions for Count Complete Tree Nodes.
```python
def countNodes(root):
    level,n=0,root
    while n:
        level,n=level+1,n.left
    if level==0: return 0
    if level==1: return 1
    perf=[2**level-1]
    def func(n,l,level):
        if l==level-1:
            if not n.right: perf[0]-=1
            if not n.left: perf[0]-=1
            else: return True
        else:
            if func(n.right,l+1,level):
                return True
            func(n.left,l+1,level)
    func(root, 1, level)
    return perf[0]
```

BST in-order traversal 
```python
def pre(root):
    if not root: return
    stack,p=[],root
    while stack or p:
        while p:
            stack.append(p)
            p=p.left
        p=stack.pop()
        visit(p)
        p=p.right
```

BST pre-order traversal 
```python
def in(root):
    if not root: return
    stack,p=[],root
    while stack or p:
        if not p:
            p=stack.pop()
        visit(p)
        if p.right:
            stack.append(p.right)
        p=p.left
```

BST post-order traversal 
```python
def post(root):
    if not root: return
    stack,p,last_visit=[],root,None
    while stack or p:
        while p:
            stack.append(p)
            p=p.left
        if not stack[-1].right or last_visit==stack[-1].right:
            p=stack.pop()
            visit(p)
            p=p.right
            last_visit=p
        else:
            p=stack[-1].right
```


Iterative approach. Time Limit Exceeded at case [1,2,3,4,5,6,7]
```python
def countNodes(root):
    level,n=0,root
    while n:
        level,n=level+1,n.left
    if level==0: return 0
    if level==1: return 1

    perf=2**(level-1)-1
    stack,p,last_visit,h=[],root,None,1
    while stack or p:
        while p:
            stack.append((p,h))
            p,h=p.left,h+1
        if not stack[-1][0].right or last_visit==stack[-1][0].right:
            p,h=stack.pop()
            if h==level:
                perf+=1
            else:
                if not p.left or not p.right: 
                    return perf
            p=p.right
            last_visit=p
        else:
            p=stack[-1][0].right
    return perf
```