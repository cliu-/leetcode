132. Palindrome Partitioning II
Hard

Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:

Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.


```python
class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
```

1st answer, time limit exceeded at case `"apjesgpsxoeiokmqmfgvjslcjukbqxpsobyhjpbgdfruqdkeiszrlmtwgfxyfostpqczidfljwfbbrflkgdvtytbgqalguewnhvvmcgxboycffopmtmhtfizxkmeftcucxpobxmelmjtuzigsxnncxpaibgpuijwhankxbplpyejxmrrjgeoevqozwdtgospohznkoyzocjlracchjqnggbfeebmuvbicbvmpuleywrpzwsihivnrwtxcukwplgtobhgxukwrdlszfaiqxwjvrgxnsveedxseeyeykarqnjrtlaliyudpacctzizcftjlunlgnfwcqqxcqikocqffsjyurzwysfjmswvhbrmshjuzsgpwyubtfbnwajuvrfhlccvfwhxfqthkcwhatktymgxostjlztwdxritygbrbibdgkezvzajizxasjnrcjwzdfvdnwwqeyumkamhzoqhnqjfzwzbixclcxqrtniznemxeahfozp"`
```python
def minCut(s):
    map={}
    def func(s):
        if len(s)<2 or s==s[::-1]: return 0
        if s in map: return map[s]
        res=2**32
        for i in range(1,len(s)):
            l=func(s[:i])
            r=func(s[i:])
            if l+r+1<res: res=l+r+1
        map[s]=res
        return res
    return func(s)
```

2nd answer, use the solution from #131, still exceed time limit.
```python
def minCut(s):
    if len(s)<2 or s==s[::-1]: return 0
    map,memo=defaultdict(list),set()
    for r in range(len(s)):
        for l in range(r+1):
            if s[l]==s[r] and (r-l<=1 or (l+1,r-1) in memo):
                map[l].append(r-l+1)
                memo.add((l,r))
    print(map)
    def func(s,i=0):
        if i==len(s): return 0
        _min=2**32
        for n in map[i]:
            _min=min(_min,func(s,i+n)+1)
        return _min
    return func(s)
```

DP solution.
Runtime: 320 ms, faster than 79.41% of Python online submissions for Palindrome Partitioning II. Memory Usage: 52 MB, less than 11.11% of Python online submissions for Palindrome Partitioning II.
```python
def minCut(s):
    if len(s)<2 or s==s[::-1]: return 0
    dp,map=[0]*(len(s)+1),defaultdict(set)
    for r in range(len(s)):
        for l in range(r+1):
            if s[l]==s[r] and (r-l<=1 or l+1 in map[r-1]):
                map[r].add(l)
        dp[r+1]=min(dp[l] for l in map[r])+1
    return dp[-1]-1
```


"apjesgpsxoeiokmqmfgvjslcjukbqxpsobyhjpbgdfruqdkeiszrlmtwgfxyfostpqczidfljwfbbrflkgdvtytbgqalguewnhvvmcgxboycffopmtmhtfizxkmeftcucxpobxmelmjtuzigsxnncxpaibgpuijwhankxbplpyejxmrrjgeoevqozwdtgospohznkoyzocjlracchjqnggbfeebmuvbicbvmpuleywrpzwsihivnrwtxcukwplgtobhgxukwrdlszfaiqxwjvrgxnsveedxseeyeykarqnjrtlaliyudpacctzizcftjlunlgnfwcqqxcqikocqffsjyurzwysfjmswvhbrmshjuzsgpwyubtfbnwajuvrfhlccvfwhxfqthkcwhatktymgxostjlztwdxritygbrbibdgkezvzajizxasjnrcjwzdfvdnwwqeyumkamhzoqhnqjfzwzbixclcxqrtniznemxeahfozp"