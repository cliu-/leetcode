306. Additive Number
Medium

Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:

Input: "112358"
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
 

Constraints:

num consists only of digits '0'-'9'.
1 <= num.length <= 35


```python
class Solution(object):
    def isAdditiveNumber(self, num):
        """
        :type num: str
        :rtype: bool
        """
```


Runtime: O(N**3)
Runtime: 16 ms, faster than 85.29% of Python online submissions for Additive Number.
Memory Usage: 11.8 MB, less than 100.00% of Python online submissions for Additive Number.
```python
def isAdditiveNumber(num):
    if len(num)<3: return False
    def check(i1,i2,i3,s):
        if i3>len(s): return False
        n1=int(s[i1:i2])
        n2=int(s[i2:i3])
        while i3<len(s):
            if i2-i1>1 and s[i1]=='0': return False
            if i3-i2>1 and s[i2]=='0': return False
            r=str(n1+n2)
            print('i1={},i2={},i3={},n1={},n2={},r={}'.format(i1,i2,i3,n1,n2,r))
            if i3+len(r)>len(s) or s[i3:i3+len(r)]!=r:
                return False
            i1,i2,i3=i2,i3,i3+len(r)
            t=n1
            n1,n2=n2,t+n2
        return True
    for i in xrange(1,len(num)-1):
        for j in xrange(i+1,len(num)):
            if check(0,i,j,num):
                return True
    return False
```


"000"

"101"

"123"

"112358"

"199100199"

"0199100199"