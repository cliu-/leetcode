199. Binary Tree Right Side View
Medium

1459

77

Favorite

Share
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---


```python
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
```


BFS solution.
Runtime: 20 ms, faster than 62.45% of Python online submissions for Binary Tree Right Side View.
Memory Usage: 11.9 MB, less than 17.86% of Python online submissions for Binary Tree Right Side View.
```python
from collections import deque
def rightSideView(root: TreeNode) -> List[int]:
    if not root: return []
    q,res=deque([root]),[]
    while q:
        l=len(q)
        res.append(q[-1].val)
        for _ in range(l):
            n=q.popleft()
            if n.left: q.append(n.left)
            if n.right: q.append(n.right)
    return res
```

DFS solution.
Runtime: 24 ms, faster than 33.02% of Python online submissions for Binary Tree Right Side View.
Memory Usage: 12 MB, less than 10.71% of Python online submissions for Binary Tree Right Side View.
```python
def rightSideView(root: TreeNode) -> List[int]:
    if not root: return []
    res,visited=[],set()
    def func(n,depth=1):
        if depth not in visited:
            visited.add(depth)
            res.append(n.val)
        if n.right:
            func(n.right, depth+1)
        if n.left:
            func(n.left, depth+1)
    func(root)
    return res
```