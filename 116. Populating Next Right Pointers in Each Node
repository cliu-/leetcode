116. Populating Next Right Pointers in Each Node
Medium

You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:
```
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
```

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.


Example:

![alt](116_sample.png)

```
Input: {"$id":"1","left":{"$id":"2","left":{"$id":"3","left":null,"next":null,"right":null,"val":4},"next":null,"right":{"$id":"4","left":null,"next":null,"right":null,"val":5},"val":2},"next":null,"right":{"$id":"5","left":{"$id":"6","left":null,"next":null,"right":null,"val":6},"next":null,"right":{"$id":"7","left":null,"next":null,"right":null,"val":7},"val":3},"val":1}

Output: {"$id":"1","left":{"$id":"2","left":{"$id":"3","left":null,"next":{"$id":"4","left":null,"next":{"$id":"5","left":null,"next":{"$id":"6","left":null,"next":null,"right":null,"val":7},"right":null,"val":6},"right":null,"val":5},"right":null,"val":4},"next":{"$id":"7","left":{"$ref":"5"},"next":null,"right":{"$ref":"6"},"val":3},"right":{"$ref":"4"},"val":2},"next":null,"right":{"$ref":"7"},"val":1}

Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B.
```

Note:

- You may only use constant extra space.
- Recursive approach is fine, implicit stack space does not count as extra space for this problem.


```python
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, left, right, next):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
class Solution(object):
    def connect(self, root):
        """
        :type root: Node
        :rtype: Node
        """
```

1st answer, time complexity is O(N), and space complexity is O(N), does not meet the requirement `you may only use constant extra space`.
Runtime: 56 ms, faster than 48.72% of Python online submissions for Populating Next Right Pointers in Each Node. Memory Usage: 14.2 MB, less than 76.00% of Python online submissions for Populating Next Right Pointers in Each Node.
```python
from collections import deque
def connect(root):
    if not root: return root
    q=deque([root])
    while q:
        l,pre=len(q),None
        for _ in xrange(l):
            e=q.popleft()
            if pre: e.next=pre
            pre=e
            if e.right: q.append(e.right)
            if e.left: q.append(e.left)
    return root
```

2nd answer. O(1) space complexity.
Runtime: 52 ms, faster than 75.48% of Python online submissions for Populating Next Right Pointers in Each Node.
Memory Usage: 14.2 MB, less than 60.00% of Python online submissions for Populating Next Right Pointers in Each Node.
```python
from collections import deque
def connect(root):
    if not root: return root
    p=root
    while p and p.left:
        cur,tmp=p,None
        while cur:
            if tmp: tmp.next=cur.left
            cur.left.next=cur.right
            tmp=cur.right
            cur=cur.next
        p=p.left
    return root
```