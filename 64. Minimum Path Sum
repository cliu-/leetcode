64. Minimum Path Sum
Medium

Given a (m x n) grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:
```
Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
```

```python
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
```

1st solution. Runtime: 80 ms, faster than 75.74% of Python online submissions for Minimum Path Sum. Memory Usage: 12.9 MB, less than 41.18% of Python online submissions for Minimum Path Sum.
```python
def minPathSum(grid):
    if not grid: return 0
    m,n=len(grid),len(grid[0])
    for i in range(1,n): grid[0][i]+=grid[0][i-1]
    for i in range(1,m): grid[i][0]+=grid[i-1][0]
    for i in range(1,m):
        for j in range(1,n):
            grid[i][j]=grid[i][j]+min(grid[i-1][j],grid[i][j-1])
    return grid[-1][-1]
```