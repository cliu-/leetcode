206. Reverse Linked List
Easy

Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?


```python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseList(self, head: ListNode) -> ListNode:

```


Recursive approach.
Runtime: 20 ms, faster than 84.90% of Python online submissions for Reverse Linked List.
Memory Usage: 18.4 MB, less than 5.56% of Python online submissions for Reverse Linked List.
```python
def reverseList(self, head: ListNode) -> ListNode:
    def func(h, n):
        if not n: return
        nxt,n.next=n.next,None
        p=h.next
        h.next,n.next=n,p
        func(h,nxt)
    dummy=ListNode(0)
    func(dummy,head)
    return dummy.next
```


Iterative approach.
Runtime: 28 ms, faster than 28.69% of Python online submissions for Reverse Linked List.
Memory Usage: 13.7 MB, less than 44.44% of Python online submissions for Reverse Linked List.
```python
def reverseList(self, head: ListNode) -> ListNode:
    dummy,node=ListNode(0),head
    while node:
        next,node.next=node.next,None
        p=dummy.next
        dummy.next,node.next=node,p
        node=next
    return dummy.next
```