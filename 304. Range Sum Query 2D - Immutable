304. Range Sum Query 2D - Immutable
Medium

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

![txt](range_sum_query_2d.png)

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.



Runtime: 92 ms, faster than 83.69% of Python online submissions for Range Sum Query 2D - Immutable.
Memory Usage: 14.4 MB, less than 100.00% of Python online submissions for Range Sum Query 2D - Immutable.
```python
class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        self.matrix=matrix
        if not matrix: return
        m,n=len(matrix),len(matrix[0])
        for i in xrange(1,m):
            matrix[i][0]+=matrix[i-1][0]
        for i in xrange(1,n):
            matrix[0][i]+=matrix[0][i-1]
        for i in xrange(1,m):
            for j in xrange(1,n):
                matrix[i][j]+=matrix[i-1][j]+matrix[i][j-1]-matrix[i-1][j-1]
        print(matrix)
        

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        d=0
        if row1>0:
            d=d+self.matrix[row1-1][col2]
        if col1>0:
            d=d+self.matrix[row2][col1-1]
        if row1>0 and col1>0:
            d=d-self.matrix[row1-1][col1-1]
        return self.matrix[row2][col2]-d
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
```