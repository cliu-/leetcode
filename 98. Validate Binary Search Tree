98. Validate Binary Search Tree
Medium

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
```

1st answer, failed at case `[10,5,15,null,null,6,20]`
```python
def isValidBST(root):
    def func(node):
        if not node: return True
        if node.left and node.left.val>=node.val:
            return False
        if node.right and node.right.val<=node.val:
            return False
        return func(node.left)&func(node.right)
    return func(root)
```

2nd answser.Runtime: 36 ms, faster than 58.55% of Python online submissions for Validate Binary Search Tree. Memory Usage: 16.4 MB, less than 77.36% of Python online submissions for Validate Binary Search Tree.
```python
def isValidBST(root):
    if not root: return True
    stack,p,last=[],root,-2**32
    while stack or p:
        while p:
            stack.append(p)
            p=p.left
        p=stack.pop()
        if p.val<=last: return False
        last=p.val
        p=p.right
    return True
```


[10,5,15,null,null,6,20]