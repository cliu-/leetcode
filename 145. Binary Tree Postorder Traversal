145. Binary Tree Postorder Traversal
Hard

Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
```

Runtime: 20 ms, faster than 42.15% of Python online submissions for Binary Tree Postorder Traversal.
Memory Usage: 11.9 MB, less than 20.83% of Python online submissions for Binary Tree Postorder Traversal.
```python
def postorderTraversal(root):
    if not root: return []
    p,s,last=root,[],[],None
    ans=[]
    while p or s:
        while p:
            s.append(p)
            p=p.left
        if s[-1].right and s[-1].right!=last:
            p=s[-1].right
        else:
            last=s.pop()
            ans.append(last.val)
    return ans
```