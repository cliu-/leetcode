303. Range Sum Query - Immutable
Easy

Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function.


Memory Limit Exceeded.
```python
class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        m=len(nums)
        self.dp=[[0]*m for _ in xrange(m)]
        for i in xrange(m-1,-1,-1):
            for j in xrange(m-1,i-1,-1):
                self.dp[i][j]=nums[i]+(self.dp[i+1][j] if i+1<m else 0)
        print(self.dp)

        

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        return self.dp[i][j]
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
```



Runtime: 68 ms, faster than 76.74% of Python online submissions for Range Sum Query - Immutable.
Memory Usage: 15.5 MB, less than 38.46% of Python online submissions for Range Sum Query - Immutable.
```python
class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.dp=[0]*len(nums)
        s=0
        for i in xrange(len(nums)):
            s+=nums[i]
            self.dp[i]=s 

        

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        if i==0: return self.dp[j]
        return self.dp[j]-self.dp[i-1]
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
```


["NumArray","sumRange","sumRange","sumRange"]
[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]