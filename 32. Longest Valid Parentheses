32. Longest Valid Parentheses
Hard

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:
```
Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
```
Example 2:
```
Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
```

```python
class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        """
```

1st answer. Runtime: 44 ms, faster than 40.28%. Memory Usage: 11.9 MB, less than 100.00%.
```python
def longestValidParentheses(s):
    if len(s)<2: return 0
    if len(set(s))==1: return 0
    def merge(ranges,i,j):
        print(ranges)
        if not ranges:
            ranges.append((i,j))
            return
        ri,rj=ranges[-1]
        if i==rj+1:
            ranges.pop()
            merge(ranges,ri,j)
        elif i==ri-1 and j==rj+1:
            ranges.pop()
            merge(ranges,i,j)
        else:
            ranges.append((i,j))
    stack,ranges=[],[]
    for i,c in enumerate(s):
        if c=='(':
            stack.append(i)
        if c==')':
            if not stack:
                continue
            merge(ranges,stack.pop(),i)
    ans=0
    while ranges:
        r=ranges.pop()
        if r[1]-r[0]+1>ans:
            ans=r[1]-r[0]+1
    return ans
```

There are two different solutions.
1. Two traversals:
```python
def longestValidParentheses(s):
    if len(s)<2: return 0
    if len(set(s))==1: return 0
    l,r,res=0,0,0
    for i in range(len(s)):
        if s[i]=='(': l+=1
        else: r+=1
        if l==r: res=max(res,2*l)
        if r>l: l=r=0
    for i in range(len(s)-1,-1,-1):
        if s[i]=='(': l+=1
        else: r+=1
        if l==r: res=max(res,2*l)
        if l>r: l=r=0
    return res
```

2. dynamic programming: 
```python
def longestValidParentheses(s):
    if len(s)<2: return 0
    if len(set(s))==1: return 0
    dp=[0]*len(s)
    for i in range(1,len(s)):
        if s[i]==')':
            if s[i-1]=='(':
                dp[i]=(dp[i-2]+2) if i-2>-1 else 2
            else:
                if i-dp[i-1]-1>-1 and s[i-dp[i-1]-1]=='(':
                    dp[i]=dp[i-1]+2+dp[i-dp[i-1]-2]
    return max(dp)
```


"()(()(((())))))())))"
"(()"