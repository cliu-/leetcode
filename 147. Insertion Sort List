147. Insertion Sort List
Medium

Sort a linked list using insertion sort.

![alt](Insertion-sort-example-300px.gif)

A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.
With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list
 

Algorithm of Insertion Sort:

Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.
At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.
It repeats until no input elements remain.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5


```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def insertionSortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
```

Runtime: 1516 ms, faster than 44.32% of Python online submissions for Insertion Sort List.
Memory Usage: 15.1 MB, less than 100.00% of Python online submissions for Insertion Sort List.
```python
def insertionSortList(head):
    if not head or not head.next: return head
    dummy=p=ListNode(-2**32)
    e=head
    while e:
        ne,e.next=e.next,None
        pre=None
        while p:
            if e.val<=p.val:
                if pre:
                    pre.next=e
                e.next=p
                break
            pre,p=p,p.next
            if not p:
                pre.next=e
        p,e=dummy,ne
    return dummy.next
```               
