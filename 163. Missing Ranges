163. Missing Ranges
Medium

Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

Example:

Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: ["2", "4->49", "51->74", "76->99"]

```python
class Solution(object):
    def findMissingRanges(self, nums, lower, upper):
        """
        :type nums: List[int]
        :type lower: int
        :type upper: int
        :rtype: List[str]
        """
```



Runtime: 16 ms, faster than 70.15% of Python online submissions for Missing Ranges.
Memory Usage: 11.8 MB, less than 33.33% of Python online submissions for Missing Ranges.
```python
def findMissingRanges(nums, lower, upper):
    if not nums: return [str(lower) if lower==upper else str(lower)+'->'+str(upper)]
    ranges,b=[],min(lower,nums[0])
    for n in nums:
        if n>b:
            ranges.append((b,n-1))
            b=n+1
        elif n<b: 
            continue
        else: 
            b=b+1
    if b<=upper: ranges.append((b,upper))
    return [str(l) if l==u else str(l)+'->'+str(u) for l,u in ranges]
```

[],1,1 == ['1']

[-1],-1,0 == ['0']

[-2147483648,-2147483648,0,2147483647,2147483647],-2147483648,2147483647 == ["-2147483647->-1","1->2147483646"]

