25. Reverse Nodes in k-Group
Hard

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:
```
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5
```
Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """

```

1st answer, accepted. Runtime: 40 ms, faster than 42.77%. Memory Usage: 13.4 MB, less than 57.89%.
```python
def reverseKGroup(head, k):
    if not head or not head.next:
        return head
    def reverse(pre,arr):
        n,nxt=pre,arr[-1].next
        for i in range(len(arr)-1,-1,-1):
            n.next=arr[i]
            n=n.next
        n.next=nxt
        return n
    p0=ListNode(0)
    p0.next=head
    pre,p,arr=p0,head,[None]*k
    while p:
        for i in range(k):
            arr[i]=p
            if p: p=p.next
            else: return p0.next
        pre=reverse(pre,arr)
        p=pre.next if pre else None
    return p0.next

```