48. Rotate Image
Medium

You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:
```
Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
```
Example 2:
```
Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
```

1st answer. Runtime: 20 ms, faster than 76.66% of Python online submissions for Rotate Image. Memory Usage: 11.8 MB, less than 29.73% of Python online submissions for Rotate Image.
```python
def rotate(matrix):
    if not matrix or len(matrix)==1: return matrix
    n=len(matrix)-1
    for m in range((n+1)//2):
        for i in range((n-m)-m):
            print("([m][m+i]{},{}),([n-m-i][m]{},{}),([n-m][n-m-i]{},{}),([m+i][n-m]{},{})".format(m,m+i,n-m-i,m,n-m,n-m-i,m+i,n-m))
            t=matrix[m][m+i]
            matrix[m][m+i]=matrix[n-m-i][m]
            matrix[n-m-i][m]=matrix[n-m][n-m-i]
            matrix[n-m][n-m-i]=matrix[m+i][n-m]
            matrix[m+i][n-m]=t
    return matrix
```

[[1,2],[4,5]]
[[1,2,3],[4,5,6],[7,8,9]]
[[1,2,3,4],[5,6,7,8],[14,9,10,11],[12,13,15,16]]
[[1,2,3,4,1],[5,6,7,8,5],[14,9,10,11,3],[12,13,15,16,7],[4,345,23,6,8]]