352. Data Stream as Disjoint Intervals
Hard

Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]
 

Follow up:

What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?




Runtime: 168 ms, faster than 39.47% of Python online submissions for Data Stream as Disjoint Intervals.
Memory Usage: 17.1 MB, less than 100.00% of Python online submissions for Data Stream as Disjoint Intervals.
```python
from heapq import heappop,heappush
class SummaryRanges(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.h=[]
        

    def addNum(self, val):
        """
        :type val: int
        :rtype: None
        """
        heappush(self.h,(val,val))

        

    def getIntervals(self):
        """
        :rtype: List[List[int]]
        """
        s=[]
        while self.h:
            a=heappop(self.h)
            if not s:
                s.append(a)
            else:
                if a[1]<=s[-1][1]:
                    continue
                else:
                    if a[0]<=s[-1][1] or a[0]==s[-1][1]+1:
                        b=s.pop()
                        s.append((b[0],a[1]))
                    else:
                        s.append(a)
        self.h=s
        return self.h
        


# Your SummaryRanges object will be instantiated and called as such:
# obj = SummaryRanges()
# obj.addNum(val)
# param_2 = obj.getIntervals()
```