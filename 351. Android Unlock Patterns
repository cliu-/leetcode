351. Android Unlock Patterns
Medium

Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.

 

Rules for a valid pattern:

1. Each pattern must connect at least m keys and at most n keys.
2. All the keys must be distinct.
3. If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.
4. The order of keys used matters.
 

![txt](android-unlock.png)
 

Explanation:

| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |
Invalid move: 4 - 1 - 3 - 6
Line 1 - 3 passes through key 2 which had not been selected in the pattern.

Invalid move: 4 - 1 - 9 - 2
Line 1 - 9 passes through key 5 which had not been selected in the pattern.

Valid move: 2 - 4 - 1 - 3 - 6
Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern

Valid move: 6 - 5 - 4 - 1 - 9 - 2
Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.

 

Example:

Input: m = 1, n = 1
Output: 9


```python
class Solution(object):
    def numberOfPatterns(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
```



Not sure why if I defined the `used` as a `set`, the answer would be wrong.
Runtime: 1656 ms, faster than 21.92% of Python online submissions for Android Unlock Patterns.
Memory Usage: 11.6 MB, less than 100.00% of Python online submissions for Android Unlock Patterns.
```python
def numberOfPatterns(m, n):
    
    used=[False]*9

    def check(p,t):
        if used[t]: return False
        if p==-1: return True
        # if p==4 or t==4: return True
        if (p+t)%2==1: return True
        m=(p+t)/2.0
        if m==4: return used[int(m)]
        px,py=p//3,p%3
        tx,ty=t//3,t%3
        if px!=tx and py!=ty:
            return True
        return used[int(m)]

    def func(p,l):
        if l==0: return 1
        ans=0
        for t in xrange(9):
            if check(p,t):
                used[t]=True
                ans+=func(t,l-1)
                used[t]=False
        return ans

    ans=0
    for l in xrange(m,n+1):
        ans+=func(-1,l)
        # used=set()
    return ans
```