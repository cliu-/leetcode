313. Super Ugly Number
Medium

Write a program to find the nth super ugly number.

Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k.

Example:

Input: n = 12, primes = [2,7,13,19]
Output: 32 
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 
             super ugly numbers given primes = [2,7,13,19] of size 4.


Note:

- 1 is a super ugly number for any given primes.
- The given numbers in primes are in ascending order.
- 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000.
- The nth super ugly number is guaranteed to fit in a 32-bit signed integer.


```python
class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        """
        :type n: int
        :type primes: List[int]
        :rtype: int
        """
```


The same solution as `264. Ugly Number II`.
Runtime: 1656 ms, faster than 12.26% of Python online submissions for Super Ugly Number.
Memory Usage: 82.9 MB, less than 25.00% of Python online submissions for Super Ugly Number.
```python
from heapq import heapq_push,heapq_pop
def nthSuperUglyNumber(n, primes):
    h,a,seen=[1],[],{1, }
    while len(a)<n:
        x=heapq_pop(h)
        a.append(x)
        for y in primes:
            z=x*y
            if z not in seen:
                heapq_push(h,z)
                seen.add(z)
    return a[-1] 
```



import heapq
class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        """
        :type n: int
        :type primes: List[int]
        :rtype: int
        """
        if n==1: return 1
        pq,res=[(i, i, 0) for i in primes],[1]*n
        heapq.heapify(pq)
        for m in range(1,n):
            p=pq[0][0]
            while pq[0][0]==p:
                x,y,z=heapq.heappop(pq)
                res[m],z=x,z+1
                x=res[z]*y
                heapq.heappush(pq, (x,y,z))
        return res[-1]
