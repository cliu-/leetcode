156. Binary Tree Upside Down
Medium

Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.

Example:

Input: [1,2,3,4,5]

    1
   / \
  2   3
 / \
4   5

Output: return the root of the binary tree [4,5,2,#,#,3,1]

   4
  / \
 5   2
    / \
   3   1  
Clarification:

Confused what [4,5,2,#,#,3,1] means? Read more below on how binary tree is serialized on OJ.

The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:

   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as [1,2,3,#,#,4,#,#,5].


```python
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def upsideDownBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """

```

Runtime: 20 ms, faster than 58.96% of Python online submissions for Binary Tree Upside Down.
Memory Usage: 12 MB, less than 50.00% of Python online submissions for Binary Tree Upside Down.
```python
def upsideDownBinaryTree(root):
    if not root: return root
    new_root=[]
    def func(n):
        if not n: return None
        l=func(n.left)
        r=func(n.right)
        node=TreeNode(n.val)
        if l: 
            l.left,l.right=r,node
            if not new_root: 
                new_root.append(l)
        return node
    func(root)
    if not new_root: return TreeNode(root.val)
    return new_root[0]
```