154. Find Minimum in Rotated Sorted Array II
Hard

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0
Note:

This is a follow up problem to Find Minimum in Rotated Sorted Array.
Would allow duplicates affect the run-time complexity? How and why?


```python
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
```


Runtime: 40 ms, faster than 59.58% of Python online submissions for Find Minimum in Rotated Sorted Array II.
Memory Usage: 12 MB, less than 78.57% of Python online submissions for Find Minimum in Rotated Sorted Array II.
```python
def findMin(nums):
    if len(nums)==1: return nums[0]
    l,r=0,len(nums)-1
    while l<r:
        m=l+((r-l)//2)
        if nums[m]==nums[l]==nums[r]:
            if len(set(nums[l:m+1]))==1:
                l=m+1
            else:
                r=m-1
        elif nums[m]>nums[r]:
            l=m+1
        elif nums[m]<nums[l]:
            if m>0:
                if nums[m]<nums[m-1]:
                    return nums[m]
                else:
                    r=m
            else:
                return nums[m]
        else:
            r=m
    return nums[l]
```

[1,3,5]
findMin([3,4,0,1,2,3,3,3,3])