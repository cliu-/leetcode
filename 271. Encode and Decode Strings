271. Encode and Decode Strings
Medium

Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:

string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:

string encoded_string = encode(strs);
and Machine 2 does:

vector<string> strs2 = decode(encoded_string);
strs2 in Machine 2 should be the same as strs in Machine 1.

Implement the encode and decode methods.

 

Note:

The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.
Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.



This solution only works for Python3, because of the unicode problem.
Runtime: 104 ms, faster than 13.44% of Python3 online submissions for Encode and Decode Strings.
Memory Usage: 12.9 MB, less than 100.00% of Python3 online submissions for Encode and Decode Strings.
```python
class Codec:

    def encode(self, strs):
        """Encodes a list of strings to a single string.
        
        :type strs: List[str]
        :rtype: str
        """
        r=[str(len(strs))]
        i,j=chr(257),chr(258)
        for s in strs:
            if not s:
                r.append(s)
            else:
                r.append(i.join(s))
        ss=j.join(r)
        return ss
        

    def decode(self, s):
        """Decodes a single string to a list of strings.
        
        :type s: str
        :rtype: List[str]
        """
        i,j=chr(257),chr(258)
        ss=s.split(j)
        l,ss=ss[0],ss[1:]
        if l==0: return []
        strs=[]
        for a in ss:
            if not a:
                strs.append('')
            else:
                b=a.split(i)
                strs.append(''.join(b))
        return strs

        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(strs))
```